{
  "version": 3,
  "sources": ["../../../node_modules/wasm-feature-detect/dist/cjs/index.js", "../../../node_modules/web-worker/cjs/node.js", "../src/targets/duckdb.ts", "../src/log.ts", "../src/status.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/flat_arrow.ts", "../src/parallel/async_bindings.ts", "../src/parallel/worker_dispatcher.ts", "../src/platform.ts", "../src/version.ts", "../src/worker.ts"],
  "sourcesContent": ["\"use strict\";const e=async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}},a=async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}},n={bigInt:()=>e(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),multiValue:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),tailCall:async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads:()=>a(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))};module.exports=n;\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst URL = require('url');\n\nconst VM = require('vm');\n\nconst threads = require('worker_threads');\n\nconst WORKER = Symbol.for('worker');\nconst EVENTS = Symbol.for('events');\n\nclass EventTarget {\n  constructor() {\n    Object.defineProperty(this, EVENTS, {\n      value: new Map()\n    });\n  }\n\n  dispatchEvent(event) {\n    event.target = event.currentTarget = this;\n\n    if (this['on' + event.type]) {\n      try {\n        this['on' + event.type](event);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    const list = this[EVENTS].get(event.type);\n    if (list == null) return;\n    list.forEach(handler => {\n      try {\n        handler.call(this, event);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  addEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n    if (!events) this[EVENTS].set(type, events = []);\n    events.push(fn);\n  }\n\n  removeEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n\n    if (events) {\n      const index = events.indexOf(fn);\n      if (index !== -1) events.splice(index, 1);\n    }\n  }\n\n}\n\nfunction Event(type, target) {\n  this.type = type;\n  this.timeStamp = Date.now();\n  this.target = this.currentTarget = this.data = null;\n} // this module is used self-referentially on both sides of the\n// thread boundary, but behaves differently in each context.\n\n\nmodule.exports = threads.isMainThread ? mainThread() : workerThread();\nconst baseUrl = URL.pathToFileURL(process.cwd() + '/');\n\nfunction mainThread() {\n  /**\n   * A web-compatible Worker implementation atop Node's worker_threads.\n   *  - uses DOM-style events (Event.data, Event.type, etc)\n   *  - supports event handler properties (worker.onmessage)\n   *  - Worker() constructor accepts a module URL\n   *  - accepts the {type:'module'} option\n   *  - emulates WorkerGlobalScope within the worker\n   * @param {string} url  The URL or module specifier to load\n   * @param {object} [options]  Worker construction options\n   * @param {string} [options.name]  Available as `self.name` within the Worker\n   * @param {string} [options.type=\"classic\"]  Pass \"module\" to create a Module Worker.\n   */\n  class Worker extends EventTarget {\n    constructor(url, options) {\n      super();\n      const {\n        name,\n        type\n      } = options || {};\n      url += '';\n      let mod;\n\n      if (/^data:/.test(url)) {\n        mod = url;\n      } else {\n        mod = URL.fileURLToPath(new URL.URL(url, baseUrl));\n      }\n\n      const worker = new threads.Worker(__filename, {\n        workerData: {\n          mod,\n          name,\n          type\n        }\n      });\n      Object.defineProperty(this, WORKER, {\n        value: worker\n      });\n      worker.on('message', data => {\n        const event = new Event('message');\n        event.data = data;\n        this.dispatchEvent(event);\n      });\n      worker.on('error', error => {\n        error.type = 'error';\n        this.dispatchEvent(error);\n      });\n      worker.on('exit', () => {\n        this.dispatchEvent(new Event('close'));\n      });\n    }\n\n    postMessage(data, transferList) {\n      this[WORKER].postMessage(data, transferList);\n    }\n\n    terminate() {\n      this[WORKER].terminate();\n    }\n\n  }\n\n  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;\n  return Worker;\n}\n\nfunction workerThread() {\n  let {\n    mod,\n    name,\n    type\n  } = threads.workerData; // turn global into a mock WorkerGlobalScope\n\n  const self = global.self = global; // enqueue messages to dispatch after modules are loaded\n\n  let q = [];\n\n  function flush() {\n    const buffered = q;\n    q = null;\n    buffered.forEach(event => {\n      self.dispatchEvent(event);\n    });\n  }\n\n  threads.parentPort.on('message', data => {\n    const event = new Event('message');\n    event.data = data;\n    if (q == null) self.dispatchEvent(event);else q.push(event);\n  });\n  threads.parentPort.on('error', err => {\n    err.type = 'Error';\n    self.dispatchEvent(err);\n  });\n\n  class WorkerGlobalScope extends EventTarget {\n    postMessage(data, transferList) {\n      threads.parentPort.postMessage(data, transferList);\n    } // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close\n\n\n    close() {\n      process.exit();\n    }\n\n  }\n\n  let proto = Object.getPrototypeOf(global);\n  delete proto.constructor;\n  Object.defineProperties(WorkerGlobalScope.prototype, proto);\n  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());\n  ['postMessage', 'addEventListener', 'removeEventListener', 'dispatchEvent'].forEach(fn => {\n    proto[fn] = proto[fn].bind(global);\n  });\n  global.name = name;\n  const isDataUrl = /^data:/.test(mod);\n\n  if (type === 'module') {\n    import(mod).catch(err => {\n      if (isDataUrl && err.message === 'Not supported') {\n        console.warn('Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.');\n        return evaluateDataUrl(mod, name);\n      }\n\n      console.error(err);\n    }).then(flush);\n  } else {\n    try {\n      if (/^data:/.test(mod)) {\n        evaluateDataUrl(mod, name);\n      } else {\n        require(mod);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    Promise.resolve().then(flush);\n  }\n}\n\nfunction evaluateDataUrl(url, name) {\n  const {\n    data\n  } = parseDataUrl(url);\n  return VM.runInThisContext(data, {\n    filename: 'worker.<' + (name || 'data:') + '>'\n  });\n}\n\nfunction parseDataUrl(url) {\n  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];\n  if (!m) throw Error('Invalid Data URL.');\n  if (encoding) switch (encoding.toLowerCase()) {\n    case 'base64':\n      data = Buffer.from(data, 'base64').toString();\n      break;\n\n    default:\n      throw Error('Unknown Data URL encoding \"' + encoding + '\"');\n  }\n  return {\n    type,\n    data\n  };\n}", "export * from '../log';\nexport * from '../status';\nexport * from '../parallel';\nexport * from '../platform';\nexport * from '../version';\nexport * from '../worker';\n", "export enum LogLevel {\n    NONE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4,\n}\n\nexport enum LogTopic {\n    NONE = 0,\n    CONNECT = 1,\n    DISCONNECT = 2,\n    OPEN = 3,\n    QUERY = 4,\n}\n\nexport enum LogEvent {\n    NONE = 0,\n    OK = 1,\n    ERROR = 2,\n    START = 3,\n    RUN = 4,\n    CAPTURE = 5,\n}\n\nexport enum LogOrigin {\n    NONE = 0,\n    WEB_WORKER = 1,\n    NODE_WORKER = 2,\n    BINDINGS = 3,\n    ASYNC_DUCKDB = 4,\n}\n\nexport type LogEntry<O, T, E, V> = {\n    readonly timestamp: Date;\n    readonly level: LogLevel;\n    readonly origin: O;\n    readonly topic: T;\n    readonly event: E;\n    readonly value: V;\n};\n\nexport type LogEntryVariant =\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\n\nexport interface Logger {\n    log(entry: LogEntryVariant): void;\n}\n\nexport class VoidLogger implements Logger {\n    public log(_entry: LogEntryVariant): void {}\n}\n\nexport class ConsoleLogger implements Logger {\n    public log(entry: LogEntryVariant): void {\n        console.log(entry);\n    }\n}\n\nexport function getLogLevelLabel(level: LogLevel): string {\n    switch (level) {\n        case LogLevel.NONE:\n            return 'NONE';\n        case LogLevel.DEBUG:\n            return 'DEBUG';\n        case LogLevel.INFO:\n            return 'INFO';\n        case LogLevel.WARNING:\n            return 'WARNING';\n        case LogLevel.ERROR:\n            return 'ERROR';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogEventLabel(event: LogEvent): string {\n    switch (event) {\n        case LogEvent.NONE:\n            return 'NONE';\n        case LogEvent.OK:\n            return 'OK';\n        case LogEvent.ERROR:\n            return 'ERROR';\n        case LogEvent.START:\n            return 'START';\n        case LogEvent.RUN:\n            return 'RUN';\n        case LogEvent.CAPTURE:\n            return 'CAPTURE';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogTopicLabel(topic: LogTopic): string {\n    switch (topic) {\n        case LogTopic.CONNECT:\n            return 'CONNECT';\n        case LogTopic.DISCONNECT:\n            return 'DISCONNECT';\n        case LogTopic.OPEN:\n            return 'OPEN';\n        case LogTopic.QUERY:\n            return 'QUERY';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogOriginLabel(origin: LogOrigin): string {\n    switch (origin) {\n        case LogOrigin.NONE:\n            return 'NONE';\n        case LogOrigin.WEB_WORKER:\n            return 'WEB WORKER';\n        case LogOrigin.NODE_WORKER:\n            return 'NODE WORKER';\n        case LogOrigin.BINDINGS:\n            return 'DUCKDB BINDINGS';\n        case LogOrigin.ASYNC_DUCKDB:\n            return 'DUCKDB';\n        default:\n            return '?';\n    }\n}\n", "export enum StatusCode {\n    SUCCESS = 0,\n}\n", "import * as arrow from 'apache-arrow';\nimport { AsyncDuckDB } from './async_bindings';\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\n\n/** A thin helper to memoize the connection id */\nexport class AsyncDuckDBConnection {\n    /** The async duckdb */\n    protected readonly _bindings: AsyncDuckDB;\n    /** The conn handle */\n    protected readonly _conn: number;\n\n    constructor(bindings: AsyncDuckDB, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Access the database bindings */\n    public get bindings(): AsyncDuckDB {\n        return this._bindings;\n    }\n\n    /** Disconnect from the database */\n    public async close(): Promise<void> {\n        return this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const buffer = await this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a query */\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const header = await this._bindings.sendQuery(this._conn, text);\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n\n    /** Get table names */\n    public async getTableNames(query: string): Promise<string[]> {\n        return await this._bindings.getTableNames(this._conn, query);\n    }\n\n    /** Create a prepared statement */\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<AsyncPreparedStatement> {\n        const stmt = await this._bindings.createPrepared(this._conn, text);\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert an arrow table */\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\n        const buffer = table.serialize('binary', true);\n        await this.insertArrowFromIPCStream(buffer, options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n    /** Insert csv file from path */\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\n    }\n    /** Insert json file from path */\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\n    }\n}\n\n/** An async result stream iterator */\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\n    /** First chunk? */\n    protected _first: boolean;\n    /** Reached end of stream? */\n    protected _depleted: boolean;\n    /** In-flight */\n    protected _inFlight: Promise<Uint8Array> | null;\n\n    constructor(\n        protected readonly db: AsyncDuckDB,\n        protected readonly conn: number,\n        protected readonly header: Uint8Array,\n    ) {\n        this._first = true;\n        this._depleted = false;\n        this._inFlight = null;\n    }\n\n    async next(): Promise<IteratorResult<Uint8Array>> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        let buffer: Uint8Array;\n        if (this._inFlight != null) {\n            buffer = await this._inFlight;\n            this._inFlight = null;\n        } else {\n            buffer = await this.db.fetchQueryResults(this.conn);\n        }\n        this._depleted = buffer.length == 0;\n        if (!this._depleted) {\n            this._inFlight = this.db.fetchQueryResults(this.conn);\n        }\n        return {\n            done: this._depleted,\n            value: buffer,\n        };\n    }\n\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id */\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: AsyncDuckDB;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public async close() {\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return arrow.Table.from(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n}\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { LogEntryVariant } from '../log';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { WebFile } from '../bindings/web_file';\n\nexport type ConnectionID = number;\nexport type StatementID = number;\n\nexport enum WorkerRequestType {\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\n    CONNECT = 'CONNECT',\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\n    CREATE_PREPARED = 'CREATE_PREPARED',\n    DISCONNECT = 'DISCONNECT',\n    DROP_FILE = 'DROP_FILE',\n    DROP_FILES = 'DROP_FILES',\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\n    FLUSH_FILES = 'FLUSH_FILES',\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\n    GET_TABLE_NAMES = 'GET_TABLE_NAMES',\n    GET_VERSION = 'GET_VERSION',\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\n    INSTANTIATE = 'INSTANTIATE',\n    OPEN = 'OPEN',\n    PING = 'PING',\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\n    RESET = 'RESET',\n    RUN_PREPARED = 'RUN_PREPARED',\n    RUN_QUERY = 'RUN_QUERY',\n    SEND_PREPARED = 'SEND_PREPARED',\n    SEND_QUERY = 'SEND_QUERY',\n    TOKENIZE = 'TOKENIZE',\n}\n\nexport enum WorkerResponseType {\n    CONNECTION_INFO = 'CONNECTION_INFO',\n    ERROR = 'ERROR',\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\n    FILE_BUFFER = 'FILE_BUFFER',\n    FILE_INFOS = 'FILE_INFOS',\n    FILE_SIZE = 'FILE_SIZE',\n    FILE_STATISTICS = 'FILE_STATISTICS',\n    LOG = 'LOG',\n    OK = 'OK',\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\n    QUERY_PLAN = 'QUERY_PLAN',\n    QUERY_RESULT = 'QUERY_RESULT',\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\n    QUERY_START = 'QUERY_START',\n    REGISTERED_FILE = 'REGISTERED_FILE',\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\n    SUCCESS = 'SUCCESS',\n    TABLE_NAMES = 'TABLE_NAMES',\n    VERSION_STRING = 'VERSION_STRING',\n}\n\nexport type WorkerRequest<T, P> = {\n    readonly messageId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerResponse<T, P> = {\n    readonly messageId: number;\n    readonly requestId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\n\nexport class WorkerTask<T, D, P> {\n    readonly type: T;\n    readonly data: D;\n    promise: Promise<P>;\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\n    promiseRejecter: (value: any) => void = () => {};\n\n    constructor(type: T, data: D) {\n        this.type = type;\n        this.data = data;\n        this.promise = new Promise<P>(\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\n                this.promiseResolver = resolve;\n                this.promiseRejecter = reject;\n            },\n        );\n    }\n}\n\nexport type WorkerRequestVariant =\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\n    | WorkerRequest<WorkerRequestType.GET_TABLE_NAMES, [number, string]>\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\n    | WorkerRequest<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined]\n      >\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\n    | WorkerRequest<WorkerRequestType.PING, null>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string]>\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\n    | WorkerRequest<WorkerRequestType.RESET, null>\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.SEND_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\n\nexport type WorkerResponseVariant =\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\n    | WorkerResponse<WorkerResponseType.ERROR, any>\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\n    | WorkerResponse<WorkerResponseType.OK, null>\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_START, Uint8Array>\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\n    | WorkerResponse<WorkerResponseType.TABLE_NAMES, string[]>\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\n\nexport type WorkerTaskVariant =\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\n    | WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\n    | WorkerTask<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined],\n          null\n      >\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\n    | WorkerTask<WorkerRequestType.PING, null, null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\n    | WorkerTask<WorkerRequestType.RESET, null, null>\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\n", "import * as arrow from 'apache-arrow';\n\nexport interface FlatArrowType {\n    /// The type\n    type: string;\n    /// Is nullable?\n    nullable?: boolean;\n    /// Decimal precision\n    precision?: number;\n    /// Decimal scaling\n    scale?: number;\n    /// Timezone\n    timezone?: string;\n    /// Byte width (FixedSizeBinary)\n    byteWidth?: number;\n    /// Fields\n    children?: FlatArrowField[];\n}\n\nexport type FlatArrowField = FlatArrowType & { name: string };\n\nexport function flattenArrowField(name: string, type: arrow.DataType): FlatArrowField {\n    switch (type.typeId) {\n        case arrow.Type.Binary:\n            return { name, type: 'binary' };\n        case arrow.Type.Bool:\n            return { name, type: 'bool' };\n        case arrow.Type.Date:\n            return { name, type: 'date' };\n        case arrow.Type.DateDay:\n            return { name, type: 'date32[d]' };\n        case arrow.Type.DateMillisecond:\n            return { name, type: 'date64[ms]' };\n        case arrow.Type.Decimal: {\n            const dec = type as arrow.Decimal;\n            return { name, type: 'decimal', precision: dec.precision, scale: dec.scale };\n        }\n        case arrow.Type.Float:\n            return { name, type: 'float' };\n        case arrow.Type.Float16:\n            return { name, type: 'float16' };\n        case arrow.Type.Float32:\n            return { name, type: 'float32' };\n        case arrow.Type.Float64:\n            return { name, type: 'float64' };\n        case arrow.Type.Int:\n            return { name, type: 'int32' };\n        case arrow.Type.Int16:\n            return { name, type: 'int16' };\n        case arrow.Type.Int32:\n            return { name, type: 'int32' };\n        case arrow.Type.Int64:\n            return { name, type: 'int64' };\n        case arrow.Type.Uint16:\n            return { name, type: 'uint16' };\n        case arrow.Type.Uint32:\n            return { name, type: 'uint32' };\n        case arrow.Type.Uint64:\n            return { name, type: 'uint64' };\n        case arrow.Type.Uint8:\n            return { name, type: 'uint8' };\n        case arrow.Type.IntervalDayTime:\n            return { name, type: 'interval[dt]' };\n        case arrow.Type.IntervalYearMonth:\n            return { name, type: 'interval[m]' };\n        case arrow.Type.List: {\n            const list = type as arrow.List;\n            return { name, type: 'list', children: [flattenArrowField(list.valueField.name, list.valueField.type)] };\n        }\n        case arrow.Type.FixedSizeBinary: {\n            const bin = type as arrow.FixedSizeBinary;\n            return { name, type: 'fixedsizebinary', byteWidth: bin.byteWidth };\n        }\n        case arrow.Type.Null:\n            return { name, type: 'null' };\n        case arrow.Type.Utf8:\n            return { name, type: 'utf8' };\n        case arrow.Type.Struct: {\n            const struct_ = type as arrow.Struct;\n            return {\n                name,\n                type: 'struct',\n                children: struct_.children.map(c => flattenArrowField(c.name, c.type)),\n            };\n        }\n        case arrow.Type.Time:\n            return { name, type: 'time[s]' };\n        case arrow.Type.TimeMicrosecond:\n            return { name, type: 'time[us]' };\n        case arrow.Type.TimeMillisecond:\n            return { name, type: 'time[ms]' };\n        case arrow.Type.TimeNanosecond:\n            return { name, type: 'time[ns]' };\n        case arrow.Type.TimeSecond:\n            return { name, type: 'time[s]' };\n        case arrow.Type.Timestamp: {\n            const ts = type as arrow.Timestamp;\n            return { name, type: 'timestamp', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampSecond: {\n            const ts = type as arrow.TimestampSecond;\n            return { name, type: 'timestamp[s]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMicrosecond: {\n            const ts = type as arrow.TimestampMicrosecond;\n            return { name, type: 'timestamp[us]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampNanosecond: {\n            const ts = type as arrow.TimestampNanosecond;\n            return { name, type: 'timestamp[ns]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMillisecond: {\n            const ts = type as arrow.TimestampMillisecond;\n            return { name, type: 'timestamp[ms]', timezone: ts.timezone || undefined };\n        }\n    }\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\n}\n", "import {\n    WorkerRequestType,\n    WorkerResponseType,\n    WorkerResponseVariant,\n    WorkerTaskVariant,\n    WorkerTask,\n    ConnectionID,\n    WorkerTaskReturnType,\n} from './worker_request';\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\nimport { Logger } from '../log';\nimport { AsyncDuckDBConnection } from './async_connection';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { flattenArrowField } from '../flat_arrow';\nimport { WebFile } from '../bindings/web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\n    /** The message handler */\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\n    /** The error handler */\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\n    /** The close handler */\n    protected readonly _onCloseHandler: () => void;\n\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** The worker */\n    protected _worker: Worker | null = null;\n    /** The promise for the worker shutdown */\n    protected _workerShutdownPromise: Promise<null> | null = null;\n    /** Make the worker as terminated */\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\n\n    /** The next message id */\n    protected _nextMessageId = 0;\n    /** The pending requests */\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\n\n    constructor(logger: Logger, worker: Worker | null = null) {\n        this._logger = logger;\n        this._onMessageHandler = this.onMessage.bind(this);\n        this._onErrorHandler = this.onError.bind(this);\n        this._onCloseHandler = this.onClose.bind(this);\n        if (worker != null) this.attach(worker);\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n\n    /** Attach to worker */\n    protected attach(worker: Worker): void {\n        this._worker = worker;\n        this._worker.addEventListener('message', this._onMessageHandler);\n        this._worker.addEventListener('error', this._onErrorHandler);\n        this._worker.addEventListener('close', this._onCloseHandler);\n        this._workerShutdownPromise = new Promise<null>(\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\n                this._workerShutdownResolver = resolve;\n            },\n        );\n    }\n\n    /** Detach from worker */\n    public detach(): void {\n        if (!this._worker) return;\n        this._worker.removeEventListener('message', this._onMessageHandler);\n        this._worker.removeEventListener('error', this._onErrorHandler);\n        this._worker.removeEventListener('close', this._onCloseHandler);\n        this._worker = null;\n        this._workerShutdownResolver(null);\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Kill the worker */\n    public async terminate(): Promise<void> {\n        if (!this._worker) return;\n        this._worker.terminate();\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\n        this._worker = null;\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Post a task */\n    protected async postTask<W extends WorkerTaskVariant>(\n        task: W,\n        transfer: ArrayBuffer[] = [],\n    ): Promise<WorkerTaskReturnType<W>> {\n        if (!this._worker) {\n            console.error('cannot send a message since the worker is not set!');\n            return undefined as any;\n        }\n        const mid = this._nextMessageId++;\n        this._pendingRequests.set(mid, task);\n        this._worker.postMessage({\n            messageId: mid,\n            type: task.type,\n            data: task.data,\n        });\n        return (await task.promise) as WorkerTaskReturnType<W>;\n    }\n\n    /** Received a message */\n    protected onMessage(event: MessageEvent): void {\n        const response = event.data as WorkerResponseVariant;\n\n        // Short-circuit unassociated log entries\n        if (response.type == WorkerResponseType.LOG) {\n            this._logger.log(response.data);\n        }\n\n        // Get associated task\n        const task = this._pendingRequests.get(response.requestId);\n        if (!task) {\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\n            return;\n        }\n        this._pendingRequests.delete(response.requestId);\n\n        // Request failed?\n        if (response.type == WorkerResponseType.ERROR) {\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n            const e = new Error(response.data.message);\n            e.name = response.data.name;\n            e.stack = response.data.stack;\n\n            task.promiseRejecter(e);\n            return;\n        }\n\n        // Otherwise differentiate between the tasks first\n        switch (task.type) {\n            case WorkerRequestType.CLOSE_PREPARED:\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\n            case WorkerRequestType.COPY_FILE_TO_PATH:\n            case WorkerRequestType.DISCONNECT:\n            case WorkerRequestType.DROP_FILES:\n            case WorkerRequestType.FLUSH_FILES:\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\n            case WorkerRequestType.INSTANTIATE:\n            case WorkerRequestType.OPEN:\n            case WorkerRequestType.PING:\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\n            case WorkerRequestType.REGISTER_FILE_URL:\n            case WorkerRequestType.RESET:\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GLOB_FILE_INFOS:\n                if (response.type == WorkerResponseType.FILE_INFOS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_VERSION:\n                if (response.type == WorkerResponseType.VERSION_STRING) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_FEATURE_FLAGS:\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_TABLE_NAMES:\n                if (response.type == WorkerResponseType.TABLE_NAMES) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.TOKENIZE:\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.DROP_FILE:\n                if (response.type == WorkerResponseType.SUCCESS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CONNECT:\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.RUN_PREPARED:\n            case WorkerRequestType.RUN_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.SEND_PREPARED:\n            case WorkerRequestType.SEND_QUERY:\n                if (response.type == WorkerResponseType.QUERY_START) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CREATE_PREPARED:\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n        }\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\n    }\n\n    /** Received an error */\n    protected onError(event: ErrorEvent): void {\n        console.error(event);\n        console.error(`error in duckdb worker: ${event.message}`);\n        this._pendingRequests.clear();\n    }\n\n    /** The worker was closed */\n    protected onClose(): void {\n        this._workerShutdownResolver(null);\n        if (this._pendingRequests.size != 0) {\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\n            return;\n        }\n        this._pendingRequests.clear();\n    }\n\n    /** Reset the duckdb */\n    public async reset(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\n        return await this.postTask(task);\n    }\n\n    /** Ping the worker thread */\n    public async ping(): Promise<any> {\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\n        await this.postTask(task);\n    }\n    /** Try to drop a file */\n    public async dropFile(name: string): Promise<boolean> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, boolean>(WorkerRequestType.DROP_FILE, name);\n        return await this.postTask(task);\n    }\n    /** Try to drop files */\n    public async dropFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\n        return await this.postTask(task);\n    }\n    /** Flush all files */\n    public async flushFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\n        return await this.postTask(task);\n    }\n\n    /** Open the database */\n    public async instantiate(mainModuleURL: string, pthreadWorkerURL: string | null = null): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\n            WorkerRequestType.INSTANTIATE,\n            [mainModuleURL, pthreadWorkerURL],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get the version */\n    public async getVersion(): Promise<string> {\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\n        const version = await this.postTask(task);\n        return version;\n    }\n\n    /** Get the feature flags */\n    public async getFeatureFlags(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\n            WorkerRequestType.GET_FEATURE_FLAGS,\n            null,\n        );\n        const feature = await this.postTask(task);\n        return feature;\n    }\n\n    /** Open a new database */\n    public async open(config: DuckDBConfig): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\n        await this.postTask(task);\n    }\n\n    /** Tokenize a script text */\n    public async tokenize(text: string): Promise<ScriptTokens> {\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\n        const tokens = await this.postTask(task);\n        return tokens;\n    }\n\n    /** Connect to the database */\n    public async connectInternal(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\n        return await this.postTask(task);\n    }\n\n    /** Connect to the database */\n    public async connect(): Promise<AsyncDuckDBConnection> {\n        const cid = await this.connectInternal();\n        return new AsyncDuckDBConnection(this, cid);\n    }\n\n    /** Disconnect from the database */\n    public async disconnect(conn: ConnectionID): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\n            WorkerRequestType.DISCONNECT,\n            conn,\n        );\n        await this.postTask(task);\n    }\n\n    /** Run a query */\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.RUN_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Send a query */\n    public async sendQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.SEND_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Fetch query results */\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\n            WorkerRequestType.FETCH_QUERY_RESULTS,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get table names */\n    public async getTableNames(conn: number, text: string): Promise<string[]> {\n        const task = new WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>(\n            WorkerRequestType.GET_TABLE_NAMES,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Prepare a statement and return its identifier */\n    public async createPrepared(conn: number, text: string): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\n            WorkerRequestType.CREATE_PREPARED,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Close a prepared statement */\n    public async closePrepared(conn: number, statement: number): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\n            WorkerRequestType.CLOSE_PREPARED,\n            [conn, statement],\n        );\n        await this.postTask(task);\n    }\n    /** Execute a prepared statement and return the full result */\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.RUN_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Execute a prepared statement and stream the result */\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.SEND_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Glob file infos */\n    public async globFiles(path: string): Promise<WebFile[]> {\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\n            WorkerRequestType.GLOB_FILE_INFOS,\n            path,\n        );\n        return await this.postTask(task);\n    }\n    /** Register file text */\n    public async registerFileText(name: string, text: string): Promise<void> {\n        const buffer = TEXT_ENCODER.encode(text);\n        await this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file path. */\n    public async registerFileURL(name: string, url: string): Promise<void> {\n        if (url === undefined) {\n            url = name;\n        }\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>(\n            WorkerRequestType.REGISTER_FILE_URL,\n            [name, url],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register an empty file buffer. */\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, new Uint8Array()],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register a file buffer. */\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, buffer],\n        );\n        await this.postTask(task, [buffer.buffer]);\n    }\n\n    /** Register a file handle. */\n    public async registerFileHandle<HandleType>(name: string, handle: HandleType): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>(\n            WorkerRequestType.REGISTER_FILE_HANDLE,\n            [name, handle],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Enable file statistics */\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\n            [name, enable],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Export file statistics */\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\n            name,\n        );\n        return await this.postTask(task, []);\n    }\n\n    /** Copy a file to a buffer. */\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\n            name,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Copy a file to a path. */\n    public async copyFileToPath(name: string, path: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\n            WorkerRequestType.COPY_FILE_TO_PATH,\n            [name, path],\n        );\n        await this.postTask(task);\n    }\n\n    /** Insert arrow from an ipc stream */\n    public async insertArrowFromIPCStream(\n        conn: ConnectionID,\n        buffer: Uint8Array,\n        options?: ArrowInsertOptions,\n    ): Promise<void> {\n        if (buffer.length == 0) return;\n        // Pass to the worker\n        const task = new WorkerTask<\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n            [number, Uint8Array, ArrowInsertOptions | undefined],\n            null\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\n        await this.postTask(task, [buffer.buffer]);\n    }\n    /** Insert a csv file */\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n    /** Insert a json file */\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(flattenArrowField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n}\n", "import { DuckDBBindings } from '../bindings';\nimport { WorkerResponseVariant, WorkerRequestVariant, WorkerRequestType, WorkerResponseType } from './worker_request';\nimport { Logger, LogEntryVariant } from '../log';\n\nexport abstract class AsyncDuckDBDispatcher implements Logger {\n    /** The bindings */\n    protected _bindings: DuckDBBindings | null = null;\n    /** The next message id */\n    protected _nextMessageId = 0;\n\n    /** Instantiate the wasm module */\n    protected abstract instantiate(mainModule: string, pthreadWorker: string | null): Promise<DuckDBBindings>;\n    /** Post a response to the main thread */\n    protected abstract postMessage(response: WorkerResponseVariant, transfer: ArrayBuffer[]): void;\n\n    /** Send log entry to the main thread */\n    public log(entry: LogEntryVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: 0,\n                type: WorkerResponseType.LOG,\n                data: entry,\n            },\n            [],\n        );\n    }\n\n    /** Send plain OK without further data */\n    protected sendOK(request: WorkerRequestVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.OK,\n                data: null,\n            },\n            [],\n        );\n    }\n\n    /** Fail with an error */\n    protected failWith(request: WorkerRequestVariant, e: Error): void {\n        // Workaround for Firefox not being able to perform structured-clone on Native Errors\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n        const obj: any = {\n            name: e.name,\n            message: e.message,\n            stack: e.stack || undefined,\n        };\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.ERROR,\n                data: obj,\n            },\n            [],\n        );\n        return;\n    }\n\n    /** Process a request from the main thread */\n    public async onMessage(request: WorkerRequestVariant): Promise<void> {\n        // First process those requests that don't need bindings\n        switch (request.type) {\n            case WorkerRequestType.PING:\n                this.sendOK(request);\n                return;\n            case WorkerRequestType.INSTANTIATE:\n                if (this._bindings != null) {\n                    this.failWith(request, new Error('duckdb already initialized'));\n                }\n                try {\n                    this._bindings = await this.instantiate(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                } catch (e: any) {\n                    this._bindings = null;\n                    this.failWith(request, e);\n                }\n                return;\n            default:\n                break;\n        }\n\n        // Bindings not initialized?\n        if (!this._bindings) {\n            return this.failWith(request, new Error('duckdb is not initialized'));\n        }\n\n        // Catch every exception and forward it as error message to the main thread\n        try {\n            switch (request.type) {\n                case WorkerRequestType.GET_VERSION:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.VERSION_STRING,\n                            data: this._bindings.getVersion(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.GET_FEATURE_FLAGS:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FEATURE_FLAGS,\n                            data: this._bindings.getFeatureFlags(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.RESET:\n                    this._bindings.reset();\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.OPEN:\n                    this._bindings.open(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.DROP_FILE:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.SUCCESS,\n                            data: this._bindings.dropFile(request.data),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.DROP_FILES:\n                    this._bindings.dropFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.FLUSH_FILES:\n                    this._bindings.flushFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CONNECT: {\n                    const conn = this._bindings.connect();\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.CONNECTION_INFO,\n                            data: conn.useUnsafe((_, c) => c),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.DISCONNECT:\n                    this._bindings.disconnect(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CREATE_PREPARED: {\n                    const result = this._bindings.createPrepared(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.PREPARED_STATEMENT_ID,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.CLOSE_PREPARED: {\n                    this._bindings.closePrepared(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.RUN_PREPARED: {\n                    const result = this._bindings.runPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.RUN_QUERY: {\n                    const result = this._bindings.runQuery(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.SEND_PREPARED: {\n                    const result = this._bindings.sendPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_START,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.SEND_QUERY: {\n                    const result = this._bindings.sendQuery(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_START,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.FETCH_QUERY_RESULTS: {\n                    const result = this._bindings.fetchQueryResults(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_CHUNK,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GET_TABLE_NAMES: {\n                    const result = this._bindings.getTableNames(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.TABLE_NAMES,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GLOB_FILE_INFOS: {\n                    const infos = this._bindings.globFiles(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_INFOS,\n                            data: infos,\n                        },\n                        [],\n                    );\n                    break;\n                }\n\n                case WorkerRequestType.REGISTER_FILE_URL:\n                    this._bindings.registerFileURL(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_BUFFER:\n                    this._bindings.registerFileBuffer(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_HANDLE:\n                    this._bindings.registerFileHandle(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_PATH:\n                    this._bindings.copyFileToPath(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_BUFFER: {\n                    const buffer = this._bindings.copyFileToBuffer(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_BUFFER,\n                            data: buffer,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.COLLECT_FILE_STATISTICS:\n                    this._bindings.collectFileStatistics(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.EXPORT_FILE_STATISTICS: {\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_STATISTICS,\n                            data: this._bindings.exportFileStatistics(request.data),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM: {\n                    this._bindings.insertArrowFromIPCStream(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_CSV_FROM_PATH: {\n                    this._bindings.insertCSVFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_JSON_FROM_PATH: {\n                    this._bindings.insertJSONFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.TOKENIZE: {\n                    const result = this._bindings.tokenize(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.SCRIPT_TOKENS,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n            }\n        } catch (e: any) {\n            return this.failWith(request, e);\n        }\n    }\n}\n", "import * as check from 'wasm-feature-detect';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\nexport interface DuckDBBundles {\n    mvp: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    next?: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    nextCOI?: {\n        mainModule: string;\n        mainWorker: string;\n        pthreadWorker: string;\n    };\n}\n\nexport function getJsDelivrBundles(): DuckDBBundles {\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\n    return {\n        mvp: {\n            mainModule: `${jsdelivr_dist_url}duckdb.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser.worker.js`,\n        },\n        next: {\n            mainModule: `${jsdelivr_dist_url}duckdb-next.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-next.worker.js`,\n        },\n        // Next COI is still experimental, let the user opt in explicitly\n    };\n}\n\nexport interface DuckDBBundle {\n    mainModule: string;\n    mainWorker: string | null;\n    pthreadWorker: string | null;\n}\n\nexport interface PlatformFeatures {\n    bigInt64Array: boolean;\n    crossOriginIsolated: boolean;\n    wasmExceptions: boolean;\n    wasmSIMD: boolean;\n    wasmBulkMemory: boolean;\n    wasmThreads: boolean;\n}\n\nlet bigInt64Array: boolean | null = null;\nlet wasmExceptions: boolean | null = null;\nlet wasmThreads: boolean | null = null;\nlet wasmSIMD: boolean | null = null;\nlet wasmBulkMemory: boolean | null = null;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n    let crossOriginIsolated: boolean;\n}\n\nfunction isNode(): boolean {\n    return typeof process !== 'undefined' && process.release.name === 'node';\n}\n\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\n    if (bigInt64Array == null) {\n        bigInt64Array = typeof BigInt64Array != 'undefined';\n    }\n    if (wasmExceptions == null) {\n        wasmExceptions = await check.exceptions();\n    }\n    if (wasmThreads == null) {\n        wasmThreads = await check.threads();\n    }\n    if (wasmSIMD == null) {\n        wasmSIMD = await check.simd();\n    }\n    if (wasmBulkMemory == null) {\n        wasmBulkMemory = await check.bulkMemory();\n    }\n    return {\n        bigInt64Array: bigInt64Array!,\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\n        wasmExceptions: wasmExceptions!,\n        wasmSIMD: wasmSIMD!,\n        wasmThreads: wasmThreads!,\n        wasmBulkMemory: wasmBulkMemory!,\n    };\n}\n\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\n    const platform = await getPlatformFeatures();\n    if (platform.wasmExceptions && platform.wasmSIMD) {\n        if (platform.wasmThreads && platform.crossOriginIsolated && bundles.nextCOI) {\n            return {\n                mainModule: bundles.nextCOI.mainModule,\n                mainWorker: bundles.nextCOI.mainWorker,\n                pthreadWorker: bundles.nextCOI.pthreadWorker,\n            };\n        }\n        if (bundles.next) {\n            return {\n                mainModule: bundles.next.mainModule,\n                mainWorker: bundles.next.mainWorker,\n                pthreadWorker: null,\n            };\n        }\n    }\n    return {\n        mainModule: bundles.mvp.mainModule,\n        mainWorker: bundles.mvp.mainWorker,\n        pthreadWorker: null,\n    };\n}\n", "import config from '../package.json';\n\nexport const PACKAGE_NAME = config.name;\nexport const PACKAGE_VERSION = config.version;\n\nconst VERSION_PARTS = config.version.split('.');\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\n", "import Worker from 'web-worker';\n\nexport async function createWorker(url: string) {\n    const workerScript = await fetch(url, {\n        mode: 'cors',\n    });\n    const workerURL = URL.createObjectURL(await workerScript.blob());\n    return new Worker(workerURL);\n}\n"],
  "mappings": "2vBAAA,+BAAa,GAAM,IAAE,KAAM,IAAG,CAAC,GAAG,CAAC,MAAO,MAAM,aAAY,YAAY,IAAI,SAAS,QAAQ,EAAE,OAAO,MAAM,OAAO,QAAG,CAAS,MAAM,KAAK,GAAE,KAAM,IAAG,CAAC,GAAG,CAAC,MAAM,AAAa,OAAO,iBAApB,aAAqC,GAAI,kBAAgB,MAAM,YAAY,GAAI,mBAAkB,IAAI,YAAY,SAAS,QAAG,CAAS,MAAM,KAAK,GAAE,CAAC,OAAO,IAAI,GAAE,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,WAAW,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE,MAAM,WAAW,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,MAAM,WAAW,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,eAAe,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,eAAe,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,GAAG,MAAM,oBAAoB,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,MAAM,eAAe,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,MAAM,KAAK,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,IAAI,GAAG,MAAM,SAAS,SAAS,YAAY,SAAS,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,QAAQ,IAAI,GAAE,GAAI,YAAW,CAAC,EAAE,GAAG,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,OAAO,EAAO,QAAQ,KCAvvD,mBAeA,GAAM,GAAM,QAAQ,OAEd,GAAK,QAAQ,MAEb,EAAU,QAAQ,kBAElB,EAAS,OAAO,IAAI,UACpB,EAAS,OAAO,IAAI,UAE1B,OAAkB,CAChB,aAAc,CACZ,OAAO,eAAe,KAAM,EAAQ,CAClC,MAAO,GAAI,OAIf,cAAc,EAAO,CAGnB,GAFA,EAAM,OAAS,EAAM,cAAgB,KAEjC,KAAK,KAAO,EAAM,MACpB,GAAI,CACF,KAAK,KAAO,EAAM,MAAM,SACjB,EAAP,CACA,QAAQ,MAAM,GAIlB,GAAM,GAAO,KAAK,GAAQ,IAAI,EAAM,MACpC,AAAI,GAAQ,MACZ,EAAK,QAAQ,GAAW,CACtB,GAAI,CACF,EAAQ,KAAK,KAAM,SACZ,EAAP,CACA,QAAQ,MAAM,MAKpB,iBAAiB,EAAM,EAAI,CACzB,GAAI,GAAS,KAAK,GAAQ,IAAI,GAC9B,AAAK,GAAQ,KAAK,GAAQ,IAAI,EAAM,EAAS,IAC7C,EAAO,KAAK,GAGd,oBAAoB,EAAM,EAAI,CAC5B,GAAI,GAAS,KAAK,GAAQ,IAAI,GAE9B,GAAI,EAAQ,CACV,GAAM,GAAQ,EAAO,QAAQ,GAC7B,AAAI,IAAU,IAAI,EAAO,OAAO,EAAO,MAM7C,WAAe,EAAM,EAAQ,CAC3B,KAAK,KAAO,EACZ,KAAK,UAAY,KAAK,MACtB,KAAK,OAAS,KAAK,cAAgB,KAAK,KAAO,KAKjD,GAAO,QAAU,EAAQ,aAAe,KAAe,KACvD,GAAM,IAAU,EAAI,cAAc,QAAQ,MAAQ,KAElD,aAAsB,CAapB,eAAqB,EAAY,CAC/B,YAAY,EAAK,EAAS,CACxB,QACA,GAAM,CACJ,OACA,QACE,GAAW,GACf,GAAO,GACP,GAAI,GAEJ,AAAI,SAAS,KAAK,GAChB,EAAM,EAEN,EAAM,EAAI,cAAc,GAAI,GAAI,IAAI,EAAK,KAG3C,GAAM,GAAS,GAAI,GAAQ,OAAO,WAAY,CAC5C,WAAY,CACV,MACA,OACA,UAGJ,OAAO,eAAe,KAAM,EAAQ,CAClC,MAAO,IAET,EAAO,GAAG,UAAW,GAAQ,CAC3B,GAAM,GAAQ,GAAI,GAAM,WACxB,EAAM,KAAO,EACb,KAAK,cAAc,KAErB,EAAO,GAAG,QAAS,GAAS,CAC1B,EAAM,KAAO,QACb,KAAK,cAAc,KAErB,EAAO,GAAG,OAAQ,IAAM,CACtB,KAAK,cAAc,GAAI,GAAM,YAIjC,YAAY,EAAM,EAAc,CAC9B,KAAK,GAAQ,YAAY,EAAM,GAGjC,WAAY,CACV,KAAK,GAAQ,aAKjB,SAAO,UAAU,UAAY,EAAO,UAAU,QAAU,EAAO,UAAU,QAAU,KAC5E,EAGT,aAAwB,CACtB,GAAI,CACF,MACA,OACA,QACE,EAAQ,WAEN,EAAO,OAAO,KAAO,OAEvB,EAAI,GAER,YAAiB,CACf,GAAM,GAAW,EACjB,EAAI,KACJ,EAAS,QAAQ,GAAS,CACxB,EAAK,cAAc,KAIvB,EAAQ,WAAW,GAAG,UAAW,GAAQ,CACvC,GAAM,GAAQ,GAAI,GAAM,WACxB,EAAM,KAAO,EACb,AAAI,GAAK,KAAM,EAAK,cAAc,GAAY,EAAE,KAAK,KAEvD,EAAQ,WAAW,GAAG,QAAS,GAAO,CACpC,EAAI,KAAO,QACX,EAAK,cAAc,KAGrB,eAAgC,EAAY,CAC1C,YAAY,EAAM,GAAc,CAC9B,EAAQ,WAAW,YAAY,EAAM,IAIvC,OAAQ,CACN,QAAQ,QAKZ,GAAI,GAAQ,OAAO,eAAe,QAClC,MAAO,GAAM,YACb,OAAO,iBAAiB,EAAkB,UAAW,GACrD,EAAQ,OAAO,eAAe,OAAQ,GAAI,IAC1C,CAAC,cAAe,mBAAoB,sBAAuB,iBAAiB,QAAQ,GAAM,CACxF,EAAM,GAAM,EAAM,GAAI,KAAK,UAE7B,OAAO,KAAO,EACd,GAAM,GAAY,SAAS,KAAK,GAEhC,GAAI,IAAS,SACX,OAAO,GAAK,MAAM,GAAO,CACvB,GAAI,GAAa,EAAI,UAAY,gBAC/B,eAAQ,KAAK,wFACN,GAAgB,EAAK,GAG9B,QAAQ,MAAM,KACb,KAAK,OACH,CACL,GAAI,CACF,AAAI,SAAS,KAAK,GAChB,GAAgB,EAAK,GAErB,QAAQ,SAEH,EAAP,CACA,QAAQ,MAAM,GAGhB,QAAQ,UAAU,KAAK,IAI3B,YAAyB,EAAK,EAAM,CAClC,GAAM,CACJ,QACE,GAAa,GACjB,MAAO,IAAG,iBAAiB,EAAM,CAC/B,SAAU,WAAc,IAAQ,SAAW,MAI/C,YAAsB,EAAK,CACzB,GAAI,CAAC,EAAG,EAAM,EAAU,GAAQ,EAAI,MAAM,8CAAgD,GAC1F,GAAI,CAAC,EAAG,KAAM,OAAM,qBACpB,GAAI,EAAU,OAAQ,EAAS,mBACxB,SACH,EAAO,OAAO,KAAK,EAAM,UAAU,WACnC,cAGA,KAAM,OAAM,8BAAgC,EAAW,KAE3D,MAAO,CACL,OACA,WCrPJ,6oBCAO,GAAK,GAAL,CAAK,GACR,UAAO,GAAP,OACA,UAAQ,GAAR,QACA,SAAO,GAAP,OACA,YAAU,GAAV,UACA,UAAQ,GAAR,QALQ,WAQA,EAAL,CAAK,GACR,UAAO,GAAP,OACA,YAAU,GAAV,UACA,eAAa,GAAb,aACA,SAAO,GAAP,OACA,UAAQ,GAAR,QALQ,WAQA,EAAL,CAAK,GACR,UAAO,GAAP,OACA,OAAK,GAAL,KACA,UAAQ,GAAR,QACA,UAAQ,GAAR,QACA,QAAM,GAAN,MACA,YAAU,GAAV,UANQ,WASA,EAAL,CAAK,GACR,UAAO,GAAP,OACA,eAAa,GAAb,aACA,gBAAc,GAAd,cACA,aAAW,GAAX,WACA,iBAAe,GAAf,eALQ,WAkCL,OAAmC,CAC/B,IAAI,EAA+B,IAGvC,OAAsC,CAClC,IAAI,EAA8B,CACrC,QAAQ,IAAI,KAIb,YAA0B,EAAyB,CACtD,OAAQ,OACC,GACD,MAAO,WACN,GACD,MAAO,YACN,GACD,MAAO,WACN,GACD,MAAO,cACN,GACD,MAAO,gBAEP,MAAO,KAIZ,YAA0B,EAAyB,CACtD,OAAQ,OACC,GACD,MAAO,WACN,GACD,MAAO,SACN,GACD,MAAO,YACN,GACD,MAAO,YACN,GACD,MAAO,UACN,GACD,MAAO,kBAEP,MAAO,KAIZ,YAA0B,EAAyB,CACtD,OAAQ,OACC,GACD,MAAO,cACN,GACD,MAAO,iBACN,GACD,MAAO,WACN,GACD,MAAO,gBAEP,MAAO,KAIZ,YAA2B,EAA2B,CACzD,OAAQ,OACC,GACD,MAAO,WACN,GACD,MAAO,iBACN,GACD,MAAO,kBACN,GACD,MAAO,sBACN,GACD,MAAO,iBAEP,MAAO,KCrIZ,GAAK,GAAL,CAAK,GACR,aAAU,GAAV,UADQ,WCAZ,MAAuB,2BAMhB,WAA4B,CAM/B,YAAY,EAAuB,EAAc,CAC7C,KAAK,UAAY,EACjB,KAAK,MAAQ,KAIN,WAAwB,CAC/B,MAAO,MAAK,eAIH,QAAuB,CAChC,MAAO,MAAK,UAAU,WAAW,KAAK,OAInC,UAAa,EAAsD,CACtE,MAAO,GAAS,KAAK,UAAW,KAAK,YAI5B,OAAyD,EAAuC,CACzG,KAAK,UAAU,OAAO,IAAI,CACtB,UAAW,GAAI,MACf,MAAO,EAAS,KAChB,OAAQ,EAAU,aAClB,MAAO,EAAS,MAChB,MAAO,EAAS,IAChB,MAAO,IAEX,GAAM,GAAS,KAAM,MAAK,UAAU,SAAS,KAAK,MAAO,GACnD,EAAS,AAAM,oBAAkB,KAAQ,GAC/C,eAAQ,OAAO,EAAO,UACtB,QAAQ,OAAO,EAAO,UACf,AAAM,QAAM,KAAK,QAIf,MACT,EAC8C,CAC9C,KAAK,UAAU,OAAO,IAAI,CACtB,UAAW,GAAI,MACf,MAAO,EAAS,KAChB,OAAQ,EAAU,aAClB,MAAO,EAAS,MAChB,MAAO,EAAS,IAChB,MAAO,IAEX,GAAM,GAAS,KAAM,MAAK,UAAU,UAAU,KAAK,MAAO,GACpD,EAAO,GAAI,GAA0B,KAAK,UAAW,KAAK,MAAO,GACjE,EAAS,KAAM,AAAM,qBAAkB,KAAQ,GACrD,eAAQ,OAAO,EAAO,WACtB,QAAQ,OAAO,EAAO,YACf,OAIE,eAAc,EAAkC,CACzD,MAAO,MAAM,MAAK,UAAU,cAAc,KAAK,MAAO,QAI7C,SACT,EAC+B,CAC/B,GAAM,GAAO,KAAM,MAAK,UAAU,eAAe,KAAK,MAAO,GAC7D,MAAO,IAAI,GAA0B,KAAK,UAAW,KAAK,MAAO,QAIxD,kBAAiB,EAAoB,EAA4C,CAC1F,GAAM,GAAS,EAAM,UAAU,SAAU,IACzC,KAAM,MAAK,yBAAyB,EAAQ,QAGnC,0BAAyB,EAAoB,EAA4C,CAClG,KAAM,MAAK,UAAU,yBAAyB,KAAK,MAAO,EAAQ,QAGzD,mBAAkB,EAAc,EAA0C,CACnF,KAAM,MAAK,UAAU,kBAAkB,KAAK,MAAO,EAAM,QAGhD,oBAAmB,EAAc,EAA2C,CACrF,KAAM,MAAK,UAAU,mBAAmB,KAAK,MAAO,EAAM,KAK3D,OAAqE,CAQxE,YACuB,EACA,EACA,EACrB,CAHqB,UACA,YACA,cAEnB,KAAK,OAAS,GACd,KAAK,UAAY,GACjB,KAAK,UAAY,UAGf,OAA4C,CAC9C,GAAI,KAAK,OACL,YAAK,OAAS,GACP,CAAE,KAAM,GAAO,MAAO,KAAK,QAEtC,GAAI,KAAK,UACL,MAAO,CAAE,KAAM,GAAM,MAAO,MAEhC,GAAI,GACJ,MAAI,MAAK,WAAa,KAClB,GAAS,KAAM,MAAK,UACpB,KAAK,UAAY,MAEjB,EAAS,KAAM,MAAK,GAAG,kBAAkB,KAAK,MAElD,KAAK,UAAY,EAAO,QAAU,EAC7B,KAAK,WACN,MAAK,UAAY,KAAK,GAAG,kBAAkB,KAAK,OAE7C,CACH,KAAM,KAAK,UACX,MAAO,IAId,OAAO,gBAAiB,CACrB,MAAO,QAKR,OAAgF,CASnF,YAAY,EAAuB,EAAsB,EAAqB,CAC1E,KAAK,SAAW,EAChB,KAAK,aAAe,EACpB,KAAK,YAAc,OAIV,QAAQ,CACjB,KAAM,MAAK,SAAS,cAAc,KAAK,aAAc,KAAK,kBAIjD,UAAS,EAAwC,CAC1D,GAAM,GAAS,KAAM,MAAK,SAAS,YAAY,KAAK,aAAc,KAAK,YAAa,GAC9E,EAAS,AAAM,oBAAkB,KAAQ,GAC/C,eAAQ,OAAO,EAAO,UACtB,QAAQ,OAAO,EAAO,UACf,AAAM,QAAM,KAAK,QAIf,SAAQ,EAA+D,CAChF,GAAM,GAAS,KAAM,MAAK,SAAS,aAAa,KAAK,aAAc,KAAK,YAAa,GAC/E,EAAO,GAAI,GAA0B,KAAK,SAAU,KAAK,aAAc,GACvE,EAAS,KAAM,AAAM,qBAAkB,KAAQ,GACrD,eAAQ,OAAO,EAAO,WACtB,QAAQ,OAAO,EAAO,YACf,ICjLR,GAAK,GAAL,CAAK,GACR,kBAAiB,iBACjB,0BAA0B,0BAC1B,UAAU,UACV,sBAAsB,sBACtB,oBAAoB,oBACpB,kBAAkB,kBAClB,aAAa,aACb,YAAY,YACZ,aAAa,aACb,yBAAyB,yBACzB,sBAAsB,sBACtB,cAAc,cACd,oBAAoB,oBACpB,kBAAkB,kBAClB,cAAc,cACd,kBAAkB,kBAClB,+BAA+B,+BAC/B,uBAAuB,uBACvB,wBAAwB,wBACxB,cAAc,cACd,OAAO,OACP,OAAO,OACP,uBAAuB,uBACvB,uBAAuB,uBACvB,oBAAoB,oBACpB,QAAQ,QACR,eAAe,eACf,YAAY,YACZ,gBAAgB,gBAChB,aAAa,aACb,WAAW,WA/BH,WAkCA,EAAL,CAAK,GACR,mBAAkB,kBAClB,QAAQ,QACR,gBAAgB,gBAChB,cAAc,cACd,aAAa,aACb,YAAY,YACZ,kBAAkB,kBAClB,MAAM,MACN,KAAK,KACL,wBAAwB,wBACxB,aAAa,aACb,eAAe,eACf,qBAAqB,qBACrB,cAAc,cACd,kBAAkB,kBAClB,gBAAgB,gBAChB,UAAU,UACV,cAAc,cACd,iBAAiB,iBAnBT,WAqCL,OAA0B,CAO7B,YAAY,EAAS,EAAS,CAH9B,qBAAuD,IAAM,GAC7D,qBAAwC,IAAM,GAG1C,KAAK,KAAO,EACZ,KAAK,KAAO,EACZ,KAAK,QAAU,GAAI,SACf,CAAC,EAA8C,IAAoC,CAC/E,KAAK,gBAAkB,EACvB,KAAK,gBAAkB,MC9FvC,MAAuB,2BAqBhB,WAA2B,EAAc,EAAsC,CAClF,OAAQ,EAAK,YACJ,AAAM,QAAK,OACZ,MAAO,CAAE,OAAM,KAAM,cACpB,AAAM,QAAK,KACZ,MAAO,CAAE,OAAM,KAAM,YACpB,AAAM,QAAK,KACZ,MAAO,CAAE,OAAM,KAAM,YACpB,AAAM,QAAK,QACZ,MAAO,CAAE,OAAM,KAAM,iBACpB,AAAM,QAAK,gBACZ,MAAO,CAAE,OAAM,KAAM,kBACpB,AAAM,QAAK,QAAS,CACrB,GAAM,GAAM,EACZ,MAAO,CAAE,OAAM,KAAM,UAAW,UAAW,EAAI,UAAW,MAAO,EAAI,WAEpE,AAAM,QAAK,MACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,QACZ,MAAO,CAAE,OAAM,KAAM,eACpB,AAAM,QAAK,QACZ,MAAO,CAAE,OAAM,KAAM,eACpB,AAAM,QAAK,QACZ,MAAO,CAAE,OAAM,KAAM,eACpB,AAAM,QAAK,IACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,MACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,MACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,MACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,OACZ,MAAO,CAAE,OAAM,KAAM,cACpB,AAAM,QAAK,OACZ,MAAO,CAAE,OAAM,KAAM,cACpB,AAAM,QAAK,OACZ,MAAO,CAAE,OAAM,KAAM,cACpB,AAAM,QAAK,MACZ,MAAO,CAAE,OAAM,KAAM,aACpB,AAAM,QAAK,gBACZ,MAAO,CAAE,OAAM,KAAM,oBACpB,AAAM,QAAK,kBACZ,MAAO,CAAE,OAAM,KAAM,mBACpB,AAAM,QAAK,KAAM,CAClB,GAAM,GAAO,EACb,MAAO,CAAE,OAAM,KAAM,OAAQ,SAAU,CAAC,EAAkB,EAAK,WAAW,KAAM,EAAK,WAAW,YAE/F,AAAM,QAAK,gBAEZ,MAAO,CAAE,OAAM,KAAM,kBAAmB,UAAW,AADvC,EAC2C,eAEtD,AAAM,QAAK,KACZ,MAAO,CAAE,OAAM,KAAM,YACpB,AAAM,QAAK,KACZ,MAAO,CAAE,OAAM,KAAM,YACpB,AAAM,QAAK,OAEZ,MAAO,CACH,OACA,KAAM,SACN,SAAU,AAJE,EAIM,SAAS,IAAI,GAAK,EAAkB,EAAE,KAAM,EAAE,YAGnE,AAAM,QAAK,KACZ,MAAO,CAAE,OAAM,KAAM,eACpB,AAAM,QAAK,gBACZ,MAAO,CAAE,OAAM,KAAM,gBACpB,AAAM,QAAK,gBACZ,MAAO,CAAE,OAAM,KAAM,gBACpB,AAAM,QAAK,eACZ,MAAO,CAAE,OAAM,KAAM,gBACpB,AAAM,QAAK,WACZ,MAAO,CAAE,OAAM,KAAM,eACpB,AAAM,QAAK,UAEZ,MAAO,CAAE,OAAM,KAAM,YAAa,SAAU,AADjC,EACoC,UAAY,YAE1D,AAAM,QAAK,gBAEZ,MAAO,CAAE,OAAM,KAAM,eAAgB,SAAU,AADpC,EACuC,UAAY,YAE7D,AAAM,QAAK,qBAEZ,MAAO,CAAE,OAAM,KAAM,gBAAiB,SAAU,AADrC,EACwC,UAAY,YAE9D,AAAM,QAAK,oBAEZ,MAAO,CAAE,OAAM,KAAM,gBAAiB,SAAU,AADrC,EACwC,UAAY,YAE9D,AAAM,QAAK,qBAEZ,MAAO,CAAE,OAAM,KAAM,gBAAiB,SAAU,AADrC,EACwC,UAAY,QAGvE,KAAM,IAAI,OAAM,2BAA2B,EAAK,cCjGpD,GAAM,IAAe,GAAI,aAElB,OAAiD,CAsBpD,YAAY,EAAgB,EAAwB,KAAM,CAXhD,aAAyB,KAEzB,4BAA+C,KAE/C,6BAAqE,IAAM,GAG3E,oBAAiB,EAEjB,sBAAmD,GAAI,KAG7D,KAAK,QAAU,EACf,KAAK,kBAAoB,KAAK,UAAU,KAAK,MAC7C,KAAK,gBAAkB,KAAK,QAAQ,KAAK,MACzC,KAAK,gBAAkB,KAAK,QAAQ,KAAK,MACrC,GAAU,MAAM,KAAK,OAAO,MAIzB,SAAiB,CACxB,MAAO,MAAK,QAIN,OAAO,EAAsB,CACnC,KAAK,QAAU,EACf,KAAK,QAAQ,iBAAiB,UAAW,KAAK,mBAC9C,KAAK,QAAQ,iBAAiB,QAAS,KAAK,iBAC5C,KAAK,QAAQ,iBAAiB,QAAS,KAAK,iBAC5C,KAAK,uBAAyB,GAAI,SAC9B,CAAC,EAAoD,IAAqC,CACtF,KAAK,wBAA0B,IAMpC,QAAe,CAClB,AAAI,CAAC,KAAK,SACV,MAAK,QAAQ,oBAAoB,UAAW,KAAK,mBACjD,KAAK,QAAQ,oBAAoB,QAAS,KAAK,iBAC/C,KAAK,QAAQ,oBAAoB,QAAS,KAAK,iBAC/C,KAAK,QAAU,KACf,KAAK,wBAAwB,MAC7B,KAAK,uBAAyB,KAC9B,KAAK,wBAA0B,IAAM,SAI5B,YAA2B,CACpC,AAAI,CAAC,KAAK,SACV,MAAK,QAAQ,YAEb,KAAK,QAAU,KACf,KAAK,uBAAyB,KAC9B,KAAK,wBAA0B,IAAM,SAIzB,UACZ,EACA,EAA0B,GACM,CAChC,GAAI,CAAC,KAAK,QAAS,CACf,QAAQ,MAAM,sDACd,OAEJ,GAAM,GAAM,KAAK,iBACjB,YAAK,iBAAiB,IAAI,EAAK,GAC/B,KAAK,QAAQ,YAAY,CACrB,UAAW,EACX,KAAM,EAAK,KACX,KAAM,EAAK,OAEP,KAAM,GAAK,QAIb,UAAU,EAA2B,CAC3C,GAAM,GAAW,EAAM,KAGvB,AAAI,EAAS,MAAQ,EAAmB,KACpC,KAAK,QAAQ,IAAI,EAAS,MAI9B,GAAM,GAAO,KAAK,iBAAiB,IAAI,EAAS,WAChD,GAAI,CAAC,EAAM,CACP,QAAQ,KAAK,2BAA2B,EAAS,cAAc,EAAS,KAAK,eAC7E,OAKJ,GAHA,KAAK,iBAAiB,OAAO,EAAS,WAGlC,EAAS,MAAQ,EAAmB,MAAO,CAG3C,GAAM,GAAI,GAAI,OAAM,EAAS,KAAK,SAClC,EAAE,KAAO,EAAS,KAAK,KACvB,EAAE,MAAQ,EAAS,KAAK,MAExB,EAAK,gBAAgB,GACrB,OAIJ,OAAQ,EAAK,UACJ,GAAkB,mBAClB,GAAkB,4BAClB,GAAkB,sBAClB,GAAkB,eAClB,GAAkB,eAClB,GAAkB,gBAClB,GAAkB,iCAClB,GAAkB,yBAClB,GAAkB,0BAClB,GAAkB,gBAClB,GAAkB,SAClB,GAAkB,SAClB,GAAkB,yBAClB,GAAkB,yBAClB,GAAkB,sBAClB,GAAkB,MACnB,GAAI,EAAS,MAAQ,EAAmB,GAAI,CACxC,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,gBACnB,GAAI,EAAS,MAAQ,EAAmB,WAAY,CAChD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,YACnB,GAAI,EAAS,MAAQ,EAAmB,eAAgB,CACpD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,kBACnB,GAAI,EAAS,MAAQ,EAAmB,cAAe,CACnD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,gBACnB,GAAI,EAAS,MAAQ,EAAmB,YAAa,CACjD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,SACnB,GAAI,EAAS,MAAQ,EAAmB,cAAe,CACnD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,UACnB,GAAI,EAAS,MAAQ,EAAmB,QAAS,CAC7C,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,oBACnB,GAAI,EAAS,MAAQ,EAAmB,YAAa,CACjD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,uBACnB,GAAI,EAAS,MAAQ,EAAmB,gBAAiB,CACrD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,QACnB,GAAI,EAAS,MAAQ,EAAmB,gBAAiB,CACrD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,iBAClB,GAAkB,UACnB,GAAI,EAAS,MAAQ,EAAmB,aAAc,CAClD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,kBAClB,GAAkB,WACnB,GAAI,EAAS,MAAQ,EAAmB,YAAa,CACjD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,oBACnB,GAAI,EAAS,MAAQ,EAAmB,mBAAoB,CACxD,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,UACC,GAAkB,gBACnB,GAAI,EAAS,MAAQ,EAAmB,sBAAuB,CAC3D,EAAK,gBAAgB,EAAS,MAC9B,OAEJ,MAER,EAAK,gBAAgB,GAAI,OAAM,6BAA6B,EAAS,KAAK,eAIpE,QAAQ,EAAyB,CACvC,QAAQ,MAAM,GACd,QAAQ,MAAM,2BAA2B,EAAM,WAC/C,KAAK,iBAAiB,QAIhB,SAAgB,CAEtB,GADA,KAAK,wBAAwB,MACzB,KAAK,iBAAiB,MAAQ,EAAG,CACjC,QAAQ,KAAK,0BAA0B,KAAK,iBAAiB,yBAC7D,OAEJ,KAAK,iBAAiB,aAIb,QAAuB,CAChC,GAAM,GAAO,GAAI,GAAgD,EAAkB,MAAO,MAC1F,MAAO,MAAM,MAAK,SAAS,QAIlB,OAAqB,CAC9B,GAAM,GAAO,GAAI,GAA+C,EAAkB,KAAM,MACxF,KAAM,MAAK,SAAS,QAGX,UAAS,EAAgC,CAClD,GAAM,GAAO,GAAI,GAAyD,EAAkB,UAAW,GACvG,MAAO,MAAM,MAAK,SAAS,QAGlB,YAA2B,CACpC,GAAM,GAAO,GAAI,GAAqD,EAAkB,WAAY,MACpG,MAAO,MAAM,MAAK,SAAS,QAGlB,aAA4B,CACrC,GAAM,GAAO,GAAI,GAAsD,EAAkB,YAAa,MACtG,MAAO,MAAM,MAAK,SAAS,QAIlB,aAAY,EAAuB,EAAkC,KAAqB,CACnG,GAAM,GAAO,GAAI,GACb,EAAkB,YAClB,CAAC,EAAe,IAEpB,MAAO,MAAM,MAAK,SAAS,QAIlB,aAA8B,CACvC,GAAM,GAAO,GAAI,GAAwD,EAAkB,YAAa,MAExG,MADgB,MAAM,MAAK,SAAS,QAK3B,kBAAmC,CAC5C,GAAM,GAAO,GAAI,GACb,EAAkB,kBAClB,MAGJ,MADgB,MAAM,MAAK,SAAS,QAK3B,MAAK,EAAqC,CACnD,GAAM,GAAO,GAAI,GAAuD,EAAkB,KAAM,GAChG,KAAM,MAAK,SAAS,QAIX,UAAS,EAAqC,CACvD,GAAM,GAAO,GAAI,GAA6D,EAAkB,SAAU,GAE1G,MADe,MAAM,MAAK,SAAS,QAK1B,kBAAmC,CAC5C,GAAM,GAAO,GAAI,GAA0D,EAAkB,QAAS,MACtG,MAAO,MAAM,MAAK,SAAS,QAIlB,UAA0C,CACnD,GAAM,GAAM,KAAM,MAAK,kBACvB,MAAO,IAAI,GAAsB,KAAM,QAI9B,YAAW,EAAmC,CACvD,GAAM,GAAO,GAAI,GACb,EAAkB,WAClB,GAEJ,KAAM,MAAK,SAAS,QAIX,UAAS,EAAoB,EAAmC,CACzE,GAAM,GAAO,GAAI,GACb,EAAkB,UAClB,CAAC,EAAM,IAEX,MAAO,MAAM,MAAK,SAAS,QAIlB,WAAU,EAAoB,EAAmC,CAC1E,GAAM,GAAO,GAAI,GACb,EAAkB,WAClB,CAAC,EAAM,IAEX,MAAO,MAAM,MAAK,SAAS,QAIlB,mBAAkB,EAAyC,CACpE,GAAM,GAAO,GAAI,GACb,EAAkB,oBAClB,GAEJ,MAAO,MAAM,MAAK,SAAS,QAIlB,eAAc,EAAc,EAAiC,CACtE,GAAM,GAAO,GAAI,GACb,EAAkB,gBAClB,CAAC,EAAM,IAEX,MAAO,MAAM,MAAK,SAAS,QAIlB,gBAAe,EAAc,EAA+B,CACrE,GAAM,GAAO,GAAI,GACb,EAAkB,gBAClB,CAAC,EAAM,IAEX,MAAO,MAAM,MAAK,SAAS,QAGlB,eAAc,EAAc,EAAkC,CACvE,GAAM,GAAO,GAAI,GACb,EAAkB,eAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,QAGX,aAAY,EAAc,EAAmB,EAAoC,CAC1F,GAAM,GAAO,GAAI,GACb,EAAkB,aAClB,CAAC,EAAM,EAAW,IAEtB,MAAO,MAAM,MAAK,SAAS,QAGlB,cAAa,EAAc,EAAmB,EAAoC,CAC3F,GAAM,GAAO,GAAI,GACb,EAAkB,cAClB,CAAC,EAAM,EAAW,IAEtB,MAAO,MAAM,MAAK,SAAS,QAGlB,WAAU,EAAkC,CACrD,GAAM,GAAO,GAAI,GACb,EAAkB,gBAClB,GAEJ,MAAO,MAAM,MAAK,SAAS,QAGlB,kBAAiB,EAAc,EAA6B,CACrE,GAAM,GAAS,GAAa,OAAO,GACnC,KAAM,MAAK,mBAAmB,EAAM,QAG3B,iBAAgB,EAAc,EAA4B,CACnE,AAAI,IAAQ,QACR,GAAM,GAEV,GAAM,GAAO,GAAI,GACb,EAAkB,kBAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,QAIX,yBAAwB,EAA6B,CAC9D,GAAM,GAAO,GAAI,GACb,EAAkB,qBAClB,CAAC,EAAM,GAAI,cAEf,KAAM,MAAK,SAAS,QAIX,oBAAmB,EAAc,EAAmC,CAC7E,GAAM,GAAO,GAAI,GACb,EAAkB,qBAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,EAAM,CAAC,EAAO,cAIzB,oBAA+B,EAAc,EAAmC,CACzF,GAAM,GAAO,GAAI,GACb,EAAkB,qBAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,EAAM,SAIjB,uBAAsB,EAAc,EAAgC,CAC7E,GAAM,GAAO,GAAI,GACb,EAAkB,wBAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,EAAM,SAIjB,sBAAqB,EAAuC,CACrE,GAAM,GAAO,GAAI,GACb,EAAkB,uBAClB,GAEJ,MAAO,MAAM,MAAK,SAAS,EAAM,SAIxB,kBAAiB,EAAmC,CAC7D,GAAM,GAAO,GAAI,GACb,EAAkB,oBAClB,GAEJ,MAAO,MAAM,MAAK,SAAS,QAIlB,gBAAe,EAAc,EAA6B,CACnE,GAAM,GAAO,GAAI,GACb,EAAkB,kBAClB,CAAC,EAAM,IAEX,KAAM,MAAK,SAAS,QAIX,0BACT,EACA,EACA,EACa,CACb,GAAI,EAAO,QAAU,EAAG,OAExB,GAAM,GAAO,GAAI,GAIf,EAAkB,6BAA8B,CAAC,EAAM,EAAQ,IACjE,KAAM,MAAK,SAAS,EAAM,CAAC,EAAO,cAGzB,mBAAkB,EAAoB,EAAc,EAA0C,CAEvG,GAAI,EAAQ,UAAY,OAAW,CAC/B,GAAM,GAAM,GACZ,OAAW,KAAK,GAAQ,QAAS,CAC7B,GAAM,GAAO,EAAQ,QAAQ,GAC7B,EAAI,KAAK,EAAkB,EAAG,IAElC,EAAQ,YAAc,EACtB,MAAO,GAAQ,QAInB,GAAM,GAAO,GAAI,GACb,EAAkB,qBAClB,CAAC,EAAM,EAAM,IAEjB,KAAM,MAAK,SAAS,QAGX,oBAAmB,EAAoB,EAAc,EAA2C,CAEzG,GAAI,EAAQ,UAAY,OAAW,CAC/B,GAAM,GAAM,GACZ,OAAW,KAAK,GAAQ,QAAS,CAC7B,GAAM,GAAO,EAAQ,QAAQ,GAC7B,EAAI,KAAK,EAAkB,EAAG,IAElC,EAAQ,YAAc,EACtB,MAAO,GAAQ,QAInB,GAAM,GAAO,GAAI,GACb,EAAkB,sBAClB,CAAC,EAAM,EAAM,IAEjB,KAAM,MAAK,SAAS,KC3iBrB,WAAuD,CAAvD,aAJP,CAMc,eAAmC,KAEnC,oBAAiB,EAQpB,IAAI,EAA8B,CACrC,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EACX,KAAM,EAAmB,IACzB,KAAM,GAEV,IAKE,OAAO,EAAqC,CAClD,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,GACzB,KAAM,MAEV,IAKE,SAAS,EAA+B,EAAgB,CAG9D,GAAM,GAAW,CACb,KAAM,EAAE,KACR,QAAS,EAAE,QACX,MAAO,EAAE,OAAS,QAEtB,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,MACzB,KAAM,GAEV,SAMK,WAAU,EAA8C,CAEjE,OAAQ,EAAQ,UACP,GAAkB,KACnB,KAAK,OAAO,GACZ,WACC,GAAkB,YACnB,AAAI,KAAK,WAAa,MAClB,KAAK,SAAS,EAAS,GAAI,OAAM,+BAErC,GAAI,CACA,KAAK,UAAY,KAAM,MAAK,YAAY,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACtE,KAAK,OAAO,SACP,EAAP,CACE,KAAK,UAAY,KACjB,KAAK,SAAS,EAAS,GAE3B,eAEA,MAIR,GAAI,CAAC,KAAK,UACN,MAAO,MAAK,SAAS,EAAS,GAAI,OAAM,8BAI5C,GAAI,CACA,OAAQ,EAAQ,UACP,GAAkB,YACnB,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,eACzB,KAAM,KAAK,UAAU,cAEzB,IAEJ,UACC,GAAkB,kBACnB,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,cACzB,KAAM,KAAK,UAAU,mBAEzB,IAEJ,UACC,GAAkB,MACnB,KAAK,UAAU,QACf,KAAK,OAAO,GACZ,UAEC,GAAkB,KACnB,KAAK,UAAU,KAAK,EAAQ,MAC5B,KAAK,OAAO,GACZ,UACC,GAAkB,UACnB,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,QACzB,KAAM,KAAK,UAAU,SAAS,EAAQ,OAE1C,IAEJ,UACC,GAAkB,WACnB,KAAK,UAAU,YACf,KAAK,OAAO,GACZ,UACC,GAAkB,YACnB,KAAK,UAAU,aACf,KAAK,OAAO,GACZ,UACC,GAAkB,QAAS,CAC5B,GAAM,GAAO,KAAK,UAAU,UAC5B,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,gBACzB,KAAM,EAAK,UAAU,CAAC,EAAG,IAAM,IAEnC,IAEJ,UAEC,GAAkB,WACnB,KAAK,UAAU,WAAW,EAAQ,MAClC,KAAK,OAAO,GACZ,UACC,GAAkB,gBAAiB,CACpC,GAAM,GAAS,KAAK,UAAU,eAAe,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC3E,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,sBACzB,KAAM,GAEV,IAEJ,UAEC,GAAkB,eAAgB,CACnC,KAAK,UAAU,cAAc,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC3D,KAAK,OAAO,GACZ,UAEC,GAAkB,aAAc,CACjC,GAAM,GAAS,KAAK,UAAU,YAAY,EAAQ,KAAK,GAAI,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACzF,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,aACzB,KAAM,GAEV,CAAC,EAAO,SAEZ,UAEC,GAAkB,UAAW,CAC9B,GAAM,GAAS,KAAK,UAAU,SAAS,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACrE,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,aACzB,KAAM,GAEV,CAAC,EAAO,SAEZ,UAEC,GAAkB,cAAe,CAClC,GAAM,GAAS,KAAK,UAAU,aAAa,EAAQ,KAAK,GAAI,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC1F,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,YACzB,KAAM,GAEV,CAAC,EAAO,SAEZ,UAEC,GAAkB,WAAY,CAC/B,GAAM,GAAS,KAAK,UAAU,UAAU,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACtE,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,YACzB,KAAM,GAEV,CAAC,EAAO,SAEZ,UAEC,GAAkB,oBAAqB,CACxC,GAAM,GAAS,KAAK,UAAU,kBAAkB,EAAQ,MACxD,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,mBACzB,KAAM,GAEV,CAAC,EAAO,SAEZ,UAEC,GAAkB,gBAAiB,CACpC,GAAM,GAAS,KAAK,UAAU,cAAc,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC1E,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,YACzB,KAAM,GAEV,IAEJ,UAEC,GAAkB,gBAAiB,CACpC,GAAM,GAAQ,KAAK,UAAU,UAAU,EAAQ,MAC/C,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,WACzB,KAAM,GAEV,IAEJ,UAGC,GAAkB,kBACnB,KAAK,UAAU,gBAAgB,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC7D,KAAK,OAAO,GACZ,UAEC,GAAkB,qBACnB,KAAK,UAAU,mBAAmB,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAChE,KAAK,OAAO,GACZ,UAEC,GAAkB,qBACnB,KAAK,UAAU,mBAAmB,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAChE,KAAK,OAAO,GACZ,UAEC,GAAkB,kBACnB,KAAK,UAAU,eAAe,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAC5D,KAAK,OAAO,GACZ,UAEC,GAAkB,oBAAqB,CACxC,GAAM,GAAS,KAAK,UAAU,iBAAiB,EAAQ,MACvD,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,YACzB,KAAM,GAEV,IAEJ,UAEC,GAAkB,wBACnB,KAAK,UAAU,sBAAsB,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACnE,KAAK,OAAO,GACZ,UAEC,GAAkB,uBAAwB,CAC3C,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,gBACzB,KAAM,KAAK,UAAU,qBAAqB,EAAQ,OAEtD,IAEJ,UAEC,GAAkB,6BAA8B,CACjD,KAAK,UAAU,yBAAyB,EAAQ,KAAK,GAAI,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACvF,KAAK,OAAO,GACZ,UAEC,GAAkB,qBAAsB,CACzC,KAAK,UAAU,kBAAkB,EAAQ,KAAK,GAAI,EAAQ,KAAK,GAAI,EAAQ,KAAK,IAChF,KAAK,OAAO,GACZ,UAEC,GAAkB,sBAAuB,CAC1C,KAAK,UAAU,mBAAmB,EAAQ,KAAK,GAAI,EAAQ,KAAK,GAAI,EAAQ,KAAK,IACjF,KAAK,OAAO,GACZ,UAEC,GAAkB,SAAU,CAC7B,GAAM,GAAS,KAAK,UAAU,SAAS,EAAQ,MAC/C,KAAK,YACD,CACI,UAAW,KAAK,iBAChB,UAAW,EAAQ,UACnB,KAAM,EAAmB,cACzB,KAAM,GAEV,IAEJ,cAGH,EAAP,CACE,MAAO,MAAK,SAAS,EAAS,MC9V1C,MAAuB,89ICEhB,GAAM,GAAe,EAAO,KACtB,EAAkB,EAAO,QAEhC,EAAgB,EAAO,QAAQ,MAAM,KAC9B,GAAwB,EAAc,GACtC,GAAwB,EAAc,GACtC,GAAwB,EAAc,GDW5C,aAA6C,CAChD,GAAM,GAAoB,gCAAgC,KAAgB,UAC1E,MAAO,CACH,IAAK,CACD,WAAY,GAAG,eACf,WAAY,GAAG,6BAEnB,KAAM,CACF,WAAY,GAAG,oBACf,WAAY,GAAG,mCAqB3B,GAAI,GAAgC,KAChC,EAAiC,KACjC,EAA8B,KAC9B,EAA2B,KAC3B,EAAiC,KAOrC,aAA2B,CACvB,MAAO,OAAO,UAAY,aAAe,QAAQ,QAAQ,OAAS,OAGtE,mBAAuE,CACnE,MAAI,IAAiB,MACjB,GAAgB,MAAO,gBAAiB,aAExC,GAAkB,MAClB,GAAiB,KAAM,AAAM,iBAE7B,GAAe,MACf,GAAc,KAAM,AAAM,cAE1B,GAAY,MACZ,GAAW,KAAM,AAAM,WAEvB,GAAkB,MAClB,GAAiB,KAAM,AAAM,iBAE1B,CACH,cAAe,EACf,oBAAqB,MAAY,WAAW,qBAAuB,GACnE,eAAgB,EAChB,SAAU,EACV,YAAa,EACb,eAAgB,GAIxB,kBAAmC,EAA+C,CAC9E,GAAM,GAAW,KAAM,MACvB,GAAI,EAAS,gBAAkB,EAAS,SAAU,CAC9C,GAAI,EAAS,aAAe,EAAS,qBAAuB,EAAQ,QAChE,MAAO,CACH,WAAY,EAAQ,QAAQ,WAC5B,WAAY,EAAQ,QAAQ,WAC5B,cAAe,EAAQ,QAAQ,eAGvC,GAAI,EAAQ,KACR,MAAO,CACH,WAAY,EAAQ,KAAK,WACzB,WAAY,EAAQ,KAAK,WACzB,cAAe,MAI3B,MAAO,CACH,WAAY,EAAQ,IAAI,WACxB,WAAY,EAAQ,IAAI,WACxB,cAAe,ME/GvB,OAAmB,QAEnB,kBAAmC,EAAa,CAC5C,GAAM,GAAe,KAAM,OAAM,EAAK,CAClC,KAAM,SAEJ,EAAY,IAAI,gBAAgB,KAAM,GAAa,QACzD,MAAO,IAAI,YAAO",
  "names": []
}
