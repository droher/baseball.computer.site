{
  "version": 3,
  "sources": ["../../../node_modules/web-worker/cjs/browser.js", "../src/targets/duckdb.ts", "../src/log.ts", "../src/status.ts", "../src/parallel/async_connection.ts", "../src/parallel/worker_request.ts", "../src/json_typedef.ts", "../src/parallel/async_bindings.ts", "../src/parallel/worker_dispatcher.ts", "../../../node_modules/wasm-feature-detect/dist/esm/index.js", "../src/version.ts", "../src/platform.ts", "../src/worker.ts"],
  "sourcesContent": ["/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;", "export * from '../bindings/config';\nexport * from '../log';\nexport * from '../status';\nexport * from '../parallel';\nexport * from '../platform';\nexport * from '../version';\nexport * from '../worker';\n\nexport { InstantiationProgress, InstantiationProgressHandler } from '../bindings';\n", "export enum LogLevel {\n    NONE = 0,\n    DEBUG = 1,\n    INFO = 2,\n    WARNING = 3,\n    ERROR = 4,\n}\n\nexport enum LogTopic {\n    NONE = 0,\n    CONNECT = 1,\n    DISCONNECT = 2,\n    OPEN = 3,\n    QUERY = 4,\n    INSTANTIATE = 5,\n}\n\nexport enum LogEvent {\n    NONE = 0,\n    OK = 1,\n    ERROR = 2,\n    START = 3,\n    RUN = 4,\n    CAPTURE = 5,\n}\n\nexport enum LogOrigin {\n    NONE = 0,\n    WEB_WORKER = 1,\n    NODE_WORKER = 2,\n    BINDINGS = 3,\n    ASYNC_DUCKDB = 4,\n}\n\nexport type LogEntry<O, T, E, V> = {\n    readonly timestamp: Date;\n    readonly level: LogLevel;\n    readonly origin: O;\n    readonly topic: T;\n    readonly event: E;\n    readonly value: V;\n};\n\nexport type LogEntryVariant =\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.INSTANTIATE, LogEvent.ERROR, string>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.QUERY, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.CONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.DISCONNECT, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.START, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.OK, void>\n    | LogEntry<LogOrigin.BINDINGS, LogTopic.OPEN, LogEvent.ERROR, void>\n    | LogEntry<LogOrigin.ASYNC_DUCKDB, LogTopic.QUERY, LogEvent.RUN, string>;\n\nexport interface Logger {\n    log(entry: LogEntryVariant): void;\n}\n\nexport class VoidLogger implements Logger {\n    public log(_entry: LogEntryVariant): void {}\n}\n\nexport class ConsoleLogger implements Logger {\n    constructor(protected level: LogLevel = LogLevel.INFO) {}\n    public log(entry: LogEntryVariant): void {\n        if (entry.level >= this.level) {\n            console.log(entry);\n        }\n    }\n}\n\nexport function getLogLevelLabel(level: LogLevel): string {\n    switch (level) {\n        case LogLevel.NONE:\n            return 'NONE';\n        case LogLevel.DEBUG:\n            return 'DEBUG';\n        case LogLevel.INFO:\n            return 'INFO';\n        case LogLevel.WARNING:\n            return 'WARNING';\n        case LogLevel.ERROR:\n            return 'ERROR';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogEventLabel(event: LogEvent): string {\n    switch (event) {\n        case LogEvent.NONE:\n            return 'NONE';\n        case LogEvent.OK:\n            return 'OK';\n        case LogEvent.ERROR:\n            return 'ERROR';\n        case LogEvent.START:\n            return 'START';\n        case LogEvent.RUN:\n            return 'RUN';\n        case LogEvent.CAPTURE:\n            return 'CAPTURE';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogTopicLabel(topic: LogTopic): string {\n    switch (topic) {\n        case LogTopic.CONNECT:\n            return 'CONNECT';\n        case LogTopic.DISCONNECT:\n            return 'DISCONNECT';\n        case LogTopic.INSTANTIATE:\n            return 'INSTANTIATE';\n        case LogTopic.OPEN:\n            return 'OPEN';\n        case LogTopic.QUERY:\n            return 'QUERY';\n        default:\n            return '?';\n    }\n}\n\nexport function getLogOriginLabel(origin: LogOrigin): string {\n    switch (origin) {\n        case LogOrigin.NONE:\n            return 'NONE';\n        case LogOrigin.WEB_WORKER:\n            return 'WEB WORKER';\n        case LogOrigin.NODE_WORKER:\n            return 'NODE WORKER';\n        case LogOrigin.BINDINGS:\n            return 'DUCKDB BINDINGS';\n        case LogOrigin.ASYNC_DUCKDB:\n            return 'DUCKDB';\n        default:\n            return '?';\n    }\n}\n", "export enum StatusCode {\n    SUCCESS = 0,\n}\n", "import * as arrow from 'apache-arrow';\nimport { AsyncDuckDB } from './async_bindings';\nimport { LogLevel, LogTopic, LogOrigin, LogEvent } from '../log';\nimport { ArrowInsertOptions, CSVInsertOptions, JSONInsertOptions } from '../bindings/insert_options';\n\n/** A thin helper to memoize the connection id */\nexport class AsyncDuckDBConnection {\n    /** The async duckdb */\n    protected readonly _bindings: AsyncDuckDB;\n    /** The conn handle */\n    protected readonly _conn: number;\n\n    constructor(bindings: AsyncDuckDB, conn: number) {\n        this._bindings = bindings;\n        this._conn = conn;\n    }\n\n    /** Access the database bindings */\n    public get bindings(): AsyncDuckDB {\n        return this._bindings;\n    }\n\n    /** Disconnect from the database */\n    public async close(): Promise<void> {\n        return this._bindings.disconnect(this._conn);\n    }\n\n    /** Brave souls may use this function to consume the underlying connection id */\n    public useUnsafe<R>(callback: (bindings: AsyncDuckDB, conn: number) => R) {\n        return callback(this._bindings, this._conn);\n    }\n\n    /** Run a query */\n    public async query<T extends { [key: string]: arrow.DataType } = any>(text: string): Promise<arrow.Table<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const buffer = await this._bindings.runQuery(this._conn, text);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a query */\n    public async send<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        this._bindings.logger.log({\n            timestamp: new Date(),\n            level: LogLevel.INFO,\n            origin: LogOrigin.ASYNC_DUCKDB,\n            topic: LogTopic.QUERY,\n            event: LogEvent.RUN,\n            value: text,\n        });\n        const header = await this._bindings.sendQuery(this._conn, text);\n        const iter = new AsyncResultStreamIterator(this._bindings, this._conn, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n\n    /** Get table names */\n    public async getTableNames(query: string): Promise<string[]> {\n        return await this._bindings.getTableNames(this._conn, query);\n    }\n\n    /** Create a prepared statement */\n    public async prepare<T extends { [key: string]: arrow.DataType } = any>(\n        text: string,\n    ): Promise<AsyncPreparedStatement> {\n        const stmt = await this._bindings.createPrepared(this._conn, text);\n        return new AsyncPreparedStatement<T>(this._bindings, this._conn, stmt);\n    }\n\n    /** Insert an arrow table */\n    public async insertArrowTable(table: arrow.Table, options: ArrowInsertOptions): Promise<void> {\n        const buffer = arrow.tableToIPC(table, 'stream');\n        await this.insertArrowFromIPCStream(buffer, options);\n    }\n    /** Insert an arrow table from an ipc stream */\n    public async insertArrowFromIPCStream(buffer: Uint8Array, options: ArrowInsertOptions): Promise<void> {\n        await this._bindings.insertArrowFromIPCStream(this._conn, buffer, options);\n    }\n    /** Insert csv file from path */\n    public async insertCSVFromPath(text: string, options: CSVInsertOptions): Promise<void> {\n        await this._bindings.insertCSVFromPath(this._conn, text, options);\n    }\n    /** Insert json file from path */\n    public async insertJSONFromPath(text: string, options: JSONInsertOptions): Promise<void> {\n        await this._bindings.insertJSONFromPath(this._conn, text, options);\n    }\n}\n\n/** An async result stream iterator */\nexport class AsyncResultStreamIterator implements AsyncIterable<Uint8Array> {\n    /** First chunk? */\n    protected _first: boolean;\n    /** Reached end of stream? */\n    protected _depleted: boolean;\n    /** In-flight */\n    protected _inFlight: Promise<Uint8Array> | null;\n\n    constructor(\n        protected readonly db: AsyncDuckDB,\n        protected readonly conn: number,\n        protected readonly header: Uint8Array,\n    ) {\n        this._first = true;\n        this._depleted = false;\n        this._inFlight = null;\n    }\n\n    async next(): Promise<IteratorResult<Uint8Array>> {\n        if (this._first) {\n            this._first = false;\n            return { done: false, value: this.header };\n        }\n        if (this._depleted) {\n            return { done: true, value: null };\n        }\n        let buffer: Uint8Array;\n        if (this._inFlight != null) {\n            buffer = await this._inFlight;\n            this._inFlight = null;\n        } else {\n            buffer = await this.db.fetchQueryResults(this.conn);\n        }\n        this._depleted = buffer.length == 0;\n        if (!this._depleted) {\n            this._inFlight = this.db.fetchQueryResults(this.conn);\n        }\n        return {\n            done: this._depleted,\n            value: buffer,\n        };\n    }\n\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n}\n\n/** A thin helper to bind the prepared statement id */\nexport class AsyncPreparedStatement<T extends { [key: string]: arrow.DataType } = any> {\n    /** The bindings */\n    protected readonly bindings: AsyncDuckDB;\n    /** The connection id */\n    protected readonly connectionId: number;\n    /** The statement id */\n    protected readonly statementId: number;\n\n    /** Constructor */\n    constructor(bindings: AsyncDuckDB, connectionId: number, statementId: number) {\n        this.bindings = bindings;\n        this.connectionId = connectionId;\n        this.statementId = statementId;\n    }\n\n    /** Close a prepared statement */\n    public async close() {\n        await this.bindings.closePrepared(this.connectionId, this.statementId);\n    }\n\n    /** Run a prepared statement */\n    public async query(...params: any[]): Promise<arrow.Table<T>> {\n        const buffer = await this.bindings.runPrepared(this.connectionId, this.statementId, params);\n        const reader = arrow.RecordBatchReader.from<T>(buffer);\n        console.assert(reader.isSync());\n        console.assert(reader.isFile());\n        return new arrow.Table(reader as arrow.RecordBatchFileReader);\n    }\n\n    /** Send a prepared statement */\n    public async send(...params: any[]): Promise<arrow.AsyncRecordBatchStreamReader<T>> {\n        const header = await this.bindings.sendPrepared(this.connectionId, this.statementId, params);\n        const iter = new AsyncResultStreamIterator(this.bindings, this.connectionId, header);\n        const reader = await arrow.RecordBatchReader.from<T>(iter);\n        console.assert(reader.isAsync());\n        console.assert(reader.isStream());\n        return reader as unknown as arrow.AsyncRecordBatchStreamReader<T>; // XXX\n    }\n}\n", "import { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { LogEntryVariant } from '../log';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { WebFile } from '../bindings/web_file';\nimport { InstantiationProgress } from '../bindings/progress';\n\nexport type ConnectionID = number;\nexport type StatementID = number;\n\nexport enum WorkerRequestType {\n    CLOSE_PREPARED = 'CLOSE_PREPARED',\n    COLLECT_FILE_STATISTICS = 'COLLECT_FILE_STATISTICS',\n    CONNECT = 'CONNECT',\n    COPY_FILE_TO_BUFFER = 'COPY_FILE_TO_BUFFER',\n    COPY_FILE_TO_PATH = 'COPY_FILE_TO_PATH',\n    CREATE_PREPARED = 'CREATE_PREPARED',\n    DISCONNECT = 'DISCONNECT',\n    DROP_FILE = 'DROP_FILE',\n    DROP_FILES = 'DROP_FILES',\n    EXPORT_FILE_STATISTICS = 'EXPORT_FILE_STATISTICS',\n    FETCH_QUERY_RESULTS = 'FETCH_QUERY_RESULTS',\n    FLUSH_FILES = 'FLUSH_FILES',\n    GET_FEATURE_FLAGS = 'GET_FEATURE_FLAGS',\n    GET_TABLE_NAMES = 'GET_TABLE_NAMES',\n    GET_VERSION = 'GET_VERSION',\n    GLOB_FILE_INFOS = 'GLOB_FILE_INFOS',\n    INSERT_ARROW_FROM_IPC_STREAM = 'INSERT_ARROW_FROM_IPC_STREAM',\n    INSERT_CSV_FROM_PATH = 'IMPORT_CSV_FROM_PATH',\n    INSERT_JSON_FROM_PATH = 'IMPORT_JSON_FROM_PATH',\n    INSTANTIATE = 'INSTANTIATE',\n    OPEN = 'OPEN',\n    PING = 'PING',\n    REGISTER_FILE_BUFFER = 'REGISTER_FILE_BUFFER',\n    REGISTER_FILE_HANDLE = 'REGISTER_FILE_HANDLE',\n    REGISTER_FILE_URL = 'REGISTER_FILE_URL',\n    RESET = 'RESET',\n    RUN_PREPARED = 'RUN_PREPARED',\n    RUN_QUERY = 'RUN_QUERY',\n    SEND_PREPARED = 'SEND_PREPARED',\n    SEND_QUERY = 'SEND_QUERY',\n    TOKENIZE = 'TOKENIZE',\n}\n\nexport enum WorkerResponseType {\n    CONNECTION_INFO = 'CONNECTION_INFO',\n    ERROR = 'ERROR',\n    FEATURE_FLAGS = 'FEATURE_FLAGS',\n    FILE_BUFFER = 'FILE_BUFFER',\n    FILE_INFOS = 'FILE_INFOS',\n    FILE_SIZE = 'FILE_SIZE',\n    FILE_STATISTICS = 'FILE_STATISTICS',\n    INSTANTIATE_PROGRESS = 'INSTANTIATE_PROGRESS',\n    LOG = 'LOG',\n    OK = 'OK',\n    PREPARED_STATEMENT_ID = 'PREPARED_STATEMENT_ID',\n    QUERY_PLAN = 'QUERY_PLAN',\n    QUERY_RESULT = 'QUERY_RESULT',\n    QUERY_RESULT_CHUNK = 'QUERY_RESULT_CHUNK',\n    QUERY_START = 'QUERY_START',\n    REGISTERED_FILE = 'REGISTERED_FILE',\n    SCRIPT_TOKENS = 'SCRIPT_TOKENS',\n    SUCCESS = 'SUCCESS',\n    TABLE_NAMES = 'TABLE_NAMES',\n    VERSION_STRING = 'VERSION_STRING',\n}\n\nexport type WorkerRequest<T, P> = {\n    readonly messageId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerResponse<T, P> = {\n    readonly messageId: number;\n    readonly requestId: number;\n    readonly type: T;\n    readonly data: P;\n};\n\nexport type WorkerTaskReturnType<T extends WorkerTaskVariant> = T extends WorkerTask<any, any, infer P> ? P : never;\n\nexport class WorkerTask<T, D, P> {\n    readonly type: T;\n    readonly data: D;\n    promise: Promise<P>;\n    promiseResolver: (value: P | PromiseLike<P>) => void = () => {};\n    promiseRejecter: (value: any) => void = () => {};\n\n    constructor(type: T, data: D) {\n        this.type = type;\n        this.data = data;\n        this.promise = new Promise<P>(\n            (resolve: (value: P | PromiseLike<P>) => void, reject: (reason?: void) => void) => {\n                this.promiseResolver = resolve;\n                this.promiseRejecter = reject;\n            },\n        );\n    }\n}\n\nexport type WorkerRequestVariant =\n    | WorkerRequest<WorkerRequestType.CLOSE_PREPARED, [ConnectionID, StatementID]>\n    | WorkerRequest<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean]>\n    | WorkerRequest<WorkerRequestType.CONNECT, null>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_BUFFER, string>\n    | WorkerRequest<WorkerRequestType.COPY_FILE_TO_PATH, [string, string]>\n    | WorkerRequest<WorkerRequestType.CREATE_PREPARED, [ConnectionID, string]>\n    | WorkerRequest<WorkerRequestType.DISCONNECT, number>\n    | WorkerRequest<WorkerRequestType.DROP_FILE, string>\n    | WorkerRequest<WorkerRequestType.DROP_FILES, null>\n    | WorkerRequest<WorkerRequestType.EXPORT_FILE_STATISTICS, string>\n    | WorkerRequest<WorkerRequestType.FETCH_QUERY_RESULTS, number>\n    | WorkerRequest<WorkerRequestType.FLUSH_FILES, null>\n    | WorkerRequest<WorkerRequestType.GET_FEATURE_FLAGS, null>\n    | WorkerRequest<WorkerRequestType.GET_TABLE_NAMES, [number, string]>\n    | WorkerRequest<WorkerRequestType.GET_VERSION, null>\n    | WorkerRequest<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined]\n      >\n    | WorkerRequest<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions]>\n    | WorkerRequest<WorkerRequestType.INSTANTIATE, [string, string | null]>\n    | WorkerRequest<WorkerRequestType.OPEN, DuckDBConfig>\n    | WorkerRequest<WorkerRequestType.PING, null>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any]>\n    | WorkerRequest<WorkerRequestType.REGISTER_FILE_URL, [string, string]>\n    | WorkerRequest<WorkerRequestType.GLOB_FILE_INFOS, string>\n    | WorkerRequest<WorkerRequestType.RESET, null>\n    | WorkerRequest<WorkerRequestType.RUN_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.RUN_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.SEND_PREPARED, [number, number, any[]]>\n    | WorkerRequest<WorkerRequestType.SEND_QUERY, [number, string]>\n    | WorkerRequest<WorkerRequestType.TOKENIZE, string>;\n\nexport type WorkerResponseVariant =\n    | WorkerResponse<WorkerResponseType.CONNECTION_INFO, number>\n    | WorkerResponse<WorkerResponseType.ERROR, any>\n    | WorkerResponse<WorkerResponseType.FEATURE_FLAGS, number>\n    | WorkerResponse<WorkerResponseType.FILE_BUFFER, Uint8Array>\n    | WorkerResponse<WorkerResponseType.FILE_INFOS, WebFile[]>\n    | WorkerResponse<WorkerResponseType.FILE_SIZE, number>\n    | WorkerResponse<WorkerResponseType.FILE_STATISTICS, FileStatistics>\n    | WorkerResponse<WorkerResponseType.INSTANTIATE_PROGRESS, InstantiationProgress>\n    | WorkerResponse<WorkerResponseType.LOG, LogEntryVariant>\n    | WorkerResponse<WorkerResponseType.OK, null>\n    | WorkerResponse<WorkerResponseType.PREPARED_STATEMENT_ID, number>\n    | WorkerResponse<WorkerResponseType.QUERY_PLAN, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_RESULT_CHUNK, Uint8Array>\n    | WorkerResponse<WorkerResponseType.QUERY_START, Uint8Array>\n    | WorkerResponse<WorkerResponseType.SCRIPT_TOKENS, ScriptTokens>\n    | WorkerResponse<WorkerResponseType.SUCCESS, boolean>\n    | WorkerResponse<WorkerResponseType.TABLE_NAMES, string[]>\n    | WorkerResponse<WorkerResponseType.VERSION_STRING, string>;\n\nexport type WorkerTaskVariant =\n    | WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>\n    | WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>\n    | WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>\n    | WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>\n    | WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>\n    | WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>\n    | WorkerTask<WorkerRequestType.DROP_FILE, string, null>\n    | WorkerTask<WorkerRequestType.DROP_FILES, null, null>\n    | WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>\n    | WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>\n    | WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>\n    | WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>\n    | WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>\n    | WorkerTask<WorkerRequestType.GET_VERSION, null, string>\n    | WorkerTask<\n          WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n          [number, Uint8Array, ArrowInsertOptions | undefined],\n          null\n      >\n    | WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>\n    | WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>\n    | WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>\n    | WorkerTask<WorkerRequestType.PING, null, null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>\n    | WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>\n    | WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>\n    | WorkerTask<WorkerRequestType.RESET, null, null>\n    | WorkerTask<WorkerRequestType.RUN_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_PREPARED, [number, number, any[]], Uint8Array>\n    | WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>\n    | WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>;\n", "import * as arrow from 'apache-arrow';\n\nexport interface SQLType {\n    /// The sql type\n    sqlType: string;\n    /// Is nullable?\n    nullable?: boolean;\n    /// Decimal precision\n    precision?: number;\n    /// Decimal scaling\n    scale?: number;\n    /// Timezone\n    timezone?: string;\n    /// Byte width (FixedSizeBinary)\n    byteWidth?: number;\n    /// Key type\n    keyType?: SQLType;\n    /// Value type\n    valueType?: SQLType;\n    /// Fields\n    fields?: SQLField[];\n}\n\nexport function arrowToSQLType(type: arrow.DataType): SQLType {\n    switch (type.typeId) {\n        case arrow.Type.Binary:\n            return { sqlType: 'binary' };\n        case arrow.Type.Bool:\n            return { sqlType: 'bool' };\n        case arrow.Type.Date:\n            return { sqlType: 'date' };\n        case arrow.Type.DateDay:\n            return { sqlType: 'date32[d]' };\n        case arrow.Type.DateMillisecond:\n            return { sqlType: 'date64[ms]' };\n        case arrow.Type.Decimal: {\n            const dec = type as arrow.Decimal;\n            return { sqlType: 'decimal', precision: dec.precision, scale: dec.scale };\n        }\n        case arrow.Type.Float:\n            return { sqlType: 'float' };\n        case arrow.Type.Float16:\n            return { sqlType: 'float16' };\n        case arrow.Type.Float32:\n            return { sqlType: 'float32' };\n        case arrow.Type.Float64:\n            return { sqlType: 'float64' };\n        case arrow.Type.Int:\n            return { sqlType: 'int32' };\n        case arrow.Type.Int16:\n            return { sqlType: 'int16' };\n        case arrow.Type.Int32:\n            return { sqlType: 'int32' };\n        case arrow.Type.Int64:\n            return { sqlType: 'int64' };\n        case arrow.Type.Uint16:\n            return { sqlType: 'uint16' };\n        case arrow.Type.Uint32:\n            return { sqlType: 'uint32' };\n        case arrow.Type.Uint64:\n            return { sqlType: 'uint64' };\n        case arrow.Type.Uint8:\n            return { sqlType: 'uint8' };\n        case arrow.Type.IntervalDayTime:\n            return { sqlType: 'interval[dt]' };\n        case arrow.Type.IntervalYearMonth:\n            return { sqlType: 'interval[m]' };\n        case arrow.Type.List: {\n            const list = type as arrow.List;\n            return {\n                sqlType: 'list',\n                valueType: arrowToSQLType(list.valueType),\n            };\n        }\n        case arrow.Type.FixedSizeBinary: {\n            const bin = type as arrow.FixedSizeBinary;\n            return { sqlType: 'fixedsizebinary', byteWidth: bin.byteWidth };\n        }\n        case arrow.Type.Null:\n            return { sqlType: 'null' };\n        case arrow.Type.Utf8:\n            return { sqlType: 'utf8' };\n        case arrow.Type.Struct: {\n            const struct_ = type as arrow.Struct;\n            return {\n                sqlType: 'struct',\n                fields: struct_.children.map(c => arrowToSQLField(c.name, c.type)),\n            };\n        }\n        case arrow.Type.Map: {\n            const map_ = type as arrow.Map_;\n            return {\n                sqlType: 'map',\n                keyType: arrowToSQLType(map_.keyType),\n                valueType: arrowToSQLType(map_.valueType),\n            };\n        }\n        case arrow.Type.Time:\n            return { sqlType: 'time[s]' };\n        case arrow.Type.TimeMicrosecond:\n            return { sqlType: 'time[us]' };\n        case arrow.Type.TimeMillisecond:\n            return { sqlType: 'time[ms]' };\n        case arrow.Type.TimeNanosecond:\n            return { sqlType: 'time[ns]' };\n        case arrow.Type.TimeSecond:\n            return { sqlType: 'time[s]' };\n        case arrow.Type.Timestamp: {\n            const ts = type as arrow.Timestamp;\n            return { sqlType: 'timestamp', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampSecond: {\n            const ts = type as arrow.TimestampSecond;\n            return { sqlType: 'timestamp[s]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMicrosecond: {\n            const ts = type as arrow.TimestampMicrosecond;\n            return { sqlType: 'timestamp[us]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampNanosecond: {\n            const ts = type as arrow.TimestampNanosecond;\n            return { sqlType: 'timestamp[ns]', timezone: ts.timezone || undefined };\n        }\n        case arrow.Type.TimestampMillisecond: {\n            const ts = type as arrow.TimestampMillisecond;\n            return { sqlType: 'timestamp[ms]', timezone: ts.timezone || undefined };\n        }\n    }\n    throw new Error(`unsupported arrow type: ${type.toString()}`);\n}\n\nexport type SQLField = SQLType & { name: string };\n\nexport function arrowToSQLField(name: string, type: arrow.DataType): SQLField {\n    const t = arrowToSQLType(type) as SQLField;\n    t.name = name;\n    return t;\n}\n", "import {\n    WorkerRequestType,\n    WorkerResponseType,\n    WorkerResponseVariant,\n    WorkerTaskVariant,\n    WorkerTask,\n    ConnectionID,\n    WorkerTaskReturnType,\n} from './worker_request';\nimport { AsyncDuckDBBindings } from './async_bindings_interface';\nimport { Logger } from '../log';\nimport { AsyncDuckDBConnection } from './async_connection';\nimport { CSVInsertOptions, JSONInsertOptions, ArrowInsertOptions } from '../bindings/insert_options';\nimport { ScriptTokens } from '../bindings/tokens';\nimport { FileStatistics } from '../bindings/file_stats';\nimport { DuckDBConfig } from '../bindings/config';\nimport { InstantiationProgress } from '../bindings/progress';\nimport { arrowToSQLField } from '../json_typedef';\nimport { WebFile } from '../bindings/web_file';\n\nconst TEXT_ENCODER = new TextEncoder();\n\nexport class AsyncDuckDB implements AsyncDuckDBBindings {\n    /** The message handler */\n    protected readonly _onMessageHandler: (event: MessageEvent) => void;\n    /** The error handler */\n    protected readonly _onErrorHandler: (event: ErrorEvent) => void;\n    /** The close handler */\n    protected readonly _onCloseHandler: () => void;\n\n    /** Instantiate the module */\n    protected _onInstantiationProgress: ((p: InstantiationProgress) => void)[] = [];\n\n    /** The logger */\n    protected readonly _logger: Logger;\n    /** The worker */\n    protected _worker: Worker | null = null;\n    /** The promise for the worker shutdown */\n    protected _workerShutdownPromise: Promise<null> | null = null;\n    /** Make the worker as terminated */\n    protected _workerShutdownResolver: (value: PromiseLike<null> | null) => void = () => {};\n\n    /** The next message id */\n    protected _nextMessageId = 0;\n    /** The pending requests */\n    protected _pendingRequests: Map<number, WorkerTaskVariant> = new Map();\n\n    constructor(logger: Logger, worker: Worker | null = null) {\n        this._logger = logger;\n        this._onMessageHandler = this.onMessage.bind(this);\n        this._onErrorHandler = this.onError.bind(this);\n        this._onCloseHandler = this.onClose.bind(this);\n        if (worker != null) this.attach(worker);\n    }\n\n    /** Get the logger */\n    public get logger(): Logger {\n        return this._logger;\n    }\n\n    /** Attach to worker */\n    protected attach(worker: Worker): void {\n        this._worker = worker;\n        this._worker.addEventListener('message', this._onMessageHandler);\n        this._worker.addEventListener('error', this._onErrorHandler);\n        this._worker.addEventListener('close', this._onCloseHandler);\n        this._workerShutdownPromise = new Promise<null>(\n            (resolve: (value: PromiseLike<null> | null) => void, _reject: (reason?: void) => void) => {\n                this._workerShutdownResolver = resolve;\n            },\n        );\n    }\n\n    /** Detach from worker */\n    public detach(): void {\n        if (!this._worker) return;\n        this._worker.removeEventListener('message', this._onMessageHandler);\n        this._worker.removeEventListener('error', this._onErrorHandler);\n        this._worker.removeEventListener('close', this._onCloseHandler);\n        this._worker = null;\n        this._workerShutdownResolver(null);\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Kill the worker */\n    public async terminate(): Promise<void> {\n        if (!this._worker) return;\n        this._worker.terminate();\n        //await this._workerShutdownPromise; TODO deadlocking in karma?\n        this._worker = null;\n        this._workerShutdownPromise = null;\n        this._workerShutdownResolver = () => {};\n    }\n\n    /** Post a task */\n    protected async postTask<W extends WorkerTaskVariant>(\n        task: W,\n        transfer: ArrayBuffer[] = [],\n    ): Promise<WorkerTaskReturnType<W>> {\n        if (!this._worker) {\n            console.error('cannot send a message since the worker is not set!');\n            return undefined as any;\n        }\n        const mid = this._nextMessageId++;\n        this._pendingRequests.set(mid, task);\n        this._worker.postMessage(\n            {\n                messageId: mid,\n                type: task.type,\n                data: task.data,\n            },\n            transfer,\n        );\n        return (await task.promise) as WorkerTaskReturnType<W>;\n    }\n\n    /** Received a message */\n    protected onMessage(event: MessageEvent): void {\n        // Unassociated responses?\n        const response = event.data as WorkerResponseVariant;\n        switch (response.type) {\n            // Request failed?\n            case WorkerResponseType.LOG: {\n                this._logger.log(response.data);\n                return;\n            }\n            // Call progress callback\n            case WorkerResponseType.INSTANTIATE_PROGRESS: {\n                for (const p of this._onInstantiationProgress) {\n                    p(response.data);\n                }\n                return;\n            }\n        }\n\n        // Get associated task\n        const task = this._pendingRequests.get(response.requestId);\n        if (!task) {\n            console.warn(`unassociated response: [${response.requestId}, ${response.type.toString()}]`);\n            return;\n        }\n        this._pendingRequests.delete(response.requestId);\n\n        // Request failed?\n        if (response.type == WorkerResponseType.ERROR) {\n            // Workaround for Firefox not being able to perform structured-clone on Native Errors\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n            const e = new Error(response.data.message);\n            e.name = response.data.name;\n            e.stack = response.data.stack;\n            task.promiseRejecter(e);\n            return;\n        }\n\n        // Otherwise differentiate between the tasks first\n        switch (task.type) {\n            case WorkerRequestType.CLOSE_PREPARED:\n            case WorkerRequestType.COLLECT_FILE_STATISTICS:\n            case WorkerRequestType.COPY_FILE_TO_PATH:\n            case WorkerRequestType.DISCONNECT:\n            case WorkerRequestType.DROP_FILE:\n            case WorkerRequestType.DROP_FILES:\n            case WorkerRequestType.FLUSH_FILES:\n            case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM:\n            case WorkerRequestType.INSERT_CSV_FROM_PATH:\n            case WorkerRequestType.INSERT_JSON_FROM_PATH:\n            case WorkerRequestType.OPEN:\n            case WorkerRequestType.PING:\n            case WorkerRequestType.REGISTER_FILE_BUFFER:\n            case WorkerRequestType.REGISTER_FILE_HANDLE:\n            case WorkerRequestType.REGISTER_FILE_URL:\n            case WorkerRequestType.RESET:\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.INSTANTIATE:\n                this._onInstantiationProgress = [];\n                if (response.type == WorkerResponseType.OK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GLOB_FILE_INFOS:\n                if (response.type == WorkerResponseType.FILE_INFOS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_VERSION:\n                if (response.type == WorkerResponseType.VERSION_STRING) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_FEATURE_FLAGS:\n                if (response.type == WorkerResponseType.FEATURE_FLAGS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.GET_TABLE_NAMES:\n                if (response.type == WorkerResponseType.TABLE_NAMES) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.TOKENIZE:\n                if (response.type == WorkerResponseType.SCRIPT_TOKENS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.COPY_FILE_TO_BUFFER:\n                if (response.type == WorkerResponseType.FILE_BUFFER) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.EXPORT_FILE_STATISTICS:\n                if (response.type == WorkerResponseType.FILE_STATISTICS) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CONNECT:\n                if (response.type == WorkerResponseType.CONNECTION_INFO) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.RUN_PREPARED:\n            case WorkerRequestType.RUN_QUERY:\n                if (response.type == WorkerResponseType.QUERY_RESULT) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.SEND_PREPARED:\n            case WorkerRequestType.SEND_QUERY:\n                if (response.type == WorkerResponseType.QUERY_START) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.FETCH_QUERY_RESULTS:\n                if (response.type == WorkerResponseType.QUERY_RESULT_CHUNK) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n            case WorkerRequestType.CREATE_PREPARED:\n                if (response.type == WorkerResponseType.PREPARED_STATEMENT_ID) {\n                    task.promiseResolver(response.data);\n                    return;\n                }\n                break;\n        }\n        task.promiseRejecter(new Error(`unexpected response type: ${response.type.toString()}`));\n    }\n\n    /** Received an error */\n    protected onError(event: ErrorEvent): void {\n        console.error(event);\n        console.error(`error in duckdb worker: ${event.message}`);\n        this._pendingRequests.clear();\n    }\n\n    /** The worker was closed */\n    protected onClose(): void {\n        this._workerShutdownResolver(null);\n        if (this._pendingRequests.size != 0) {\n            console.warn(`worker terminated with ${this._pendingRequests.size} pending requests`);\n            return;\n        }\n        this._pendingRequests.clear();\n    }\n\n    /** Reset the duckdb */\n    public async reset(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.RESET, null, null>(WorkerRequestType.RESET, null);\n        return await this.postTask(task);\n    }\n\n    /** Ping the worker thread */\n    public async ping(): Promise<any> {\n        const task = new WorkerTask<WorkerRequestType.PING, null, null>(WorkerRequestType.PING, null);\n        await this.postTask(task);\n    }\n    /** Try to drop a file */\n    public async dropFile(name: string): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILE, string, null>(WorkerRequestType.DROP_FILE, name);\n        return await this.postTask(task);\n    }\n    /** Try to drop files */\n    public async dropFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.DROP_FILES, null, null>(WorkerRequestType.DROP_FILES, null);\n        return await this.postTask(task);\n    }\n    /** Flush all files */\n    public async flushFiles(): Promise<null> {\n        const task = new WorkerTask<WorkerRequestType.FLUSH_FILES, null, null>(WorkerRequestType.FLUSH_FILES, null);\n        return await this.postTask(task);\n    }\n\n    /** Open the database */\n    public async instantiate(\n        mainModuleURL: string,\n        pthreadWorkerURL: string | null = null,\n        progress: (progress: InstantiationProgress) => void = _p => {},\n    ): Promise<null> {\n        this._onInstantiationProgress.push(progress);\n        const task = new WorkerTask<WorkerRequestType.INSTANTIATE, [string, string | null], null>(\n            WorkerRequestType.INSTANTIATE,\n            [mainModuleURL, pthreadWorkerURL],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get the version */\n    public async getVersion(): Promise<string> {\n        const task = new WorkerTask<WorkerRequestType.GET_VERSION, null, string>(WorkerRequestType.GET_VERSION, null);\n        const version = await this.postTask(task);\n        return version;\n    }\n\n    /** Get the feature flags */\n    public async getFeatureFlags(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.GET_FEATURE_FLAGS, null, number>(\n            WorkerRequestType.GET_FEATURE_FLAGS,\n            null,\n        );\n        const feature = await this.postTask(task);\n        return feature;\n    }\n\n    /** Open a new database */\n    public async open(config: DuckDBConfig): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.OPEN, DuckDBConfig, null>(WorkerRequestType.OPEN, config);\n        await this.postTask(task);\n    }\n\n    /** Tokenize a script text */\n    public async tokenize(text: string): Promise<ScriptTokens> {\n        const task = new WorkerTask<WorkerRequestType.TOKENIZE, string, ScriptTokens>(WorkerRequestType.TOKENIZE, text);\n        const tokens = await this.postTask(task);\n        return tokens;\n    }\n\n    /** Connect to the database */\n    public async connectInternal(): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CONNECT, null, ConnectionID>(WorkerRequestType.CONNECT, null);\n        return await this.postTask(task);\n    }\n\n    /** Connect to the database */\n    public async connect(): Promise<AsyncDuckDBConnection> {\n        const cid = await this.connectInternal();\n        return new AsyncDuckDBConnection(this, cid);\n    }\n\n    /** Disconnect from the database */\n    public async disconnect(conn: ConnectionID): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.DISCONNECT, ConnectionID, null>(\n            WorkerRequestType.DISCONNECT,\n            conn,\n        );\n        await this.postTask(task);\n    }\n\n    /** Run a query */\n    public async runQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.RUN_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Send a query */\n    public async sendQuery(conn: ConnectionID, text: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_QUERY, [ConnectionID, string], Uint8Array>(\n            WorkerRequestType.SEND_QUERY,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Fetch query results */\n    public async fetchQueryResults(conn: ConnectionID): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.FETCH_QUERY_RESULTS, ConnectionID, Uint8Array>(\n            WorkerRequestType.FETCH_QUERY_RESULTS,\n            conn,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Get table names */\n    public async getTableNames(conn: number, text: string): Promise<string[]> {\n        const task = new WorkerTask<WorkerRequestType.GET_TABLE_NAMES, [number, string], string[]>(\n            WorkerRequestType.GET_TABLE_NAMES,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n\n    /** Prepare a statement and return its identifier */\n    public async createPrepared(conn: number, text: string): Promise<number> {\n        const task = new WorkerTask<WorkerRequestType.CREATE_PREPARED, [number, string], number>(\n            WorkerRequestType.CREATE_PREPARED,\n            [conn, text],\n        );\n        return await this.postTask(task);\n    }\n    /** Close a prepared statement */\n    public async closePrepared(conn: number, statement: number): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.CLOSE_PREPARED, [number, number], null>(\n            WorkerRequestType.CLOSE_PREPARED,\n            [conn, statement],\n        );\n        await this.postTask(task);\n    }\n    /** Execute a prepared statement and return the full result */\n    public async runPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.RUN_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.RUN_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Execute a prepared statement and stream the result */\n    public async sendPrepared(conn: number, statement: number, params: any[]): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.SEND_PREPARED, [ConnectionID, number, any[]], Uint8Array>(\n            WorkerRequestType.SEND_PREPARED,\n            [conn, statement, params],\n        );\n        return await this.postTask(task);\n    }\n    /** Glob file infos */\n    public async globFiles(path: string): Promise<WebFile[]> {\n        const task = new WorkerTask<WorkerRequestType.GLOB_FILE_INFOS, string, WebFile[]>(\n            WorkerRequestType.GLOB_FILE_INFOS,\n            path,\n        );\n        return await this.postTask(task);\n    }\n    /** Register file text */\n    public async registerFileText(name: string, text: string): Promise<void> {\n        const buffer = TEXT_ENCODER.encode(text);\n        await this.registerFileBuffer(name, buffer);\n    }\n    /** Register a file path. */\n    public async registerFileURL(name: string, url: string): Promise<void> {\n        if (url === undefined) {\n            url = name;\n        }\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_URL, [string, string], null>(\n            WorkerRequestType.REGISTER_FILE_URL,\n            [name, url],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register an empty file buffer. */\n    public async registerEmptyFileBuffer(name: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, new Uint8Array()],\n        );\n        await this.postTask(task);\n    }\n\n    /** Register a file buffer. */\n    public async registerFileBuffer(name: string, buffer: Uint8Array): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_BUFFER, [string, Uint8Array], null>(\n            WorkerRequestType.REGISTER_FILE_BUFFER,\n            [name, buffer],\n        );\n        await this.postTask(task, [buffer.buffer]);\n    }\n\n    /** Register a file handle. */\n    public async registerFileHandle<HandleType>(name: string, handle: HandleType): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.REGISTER_FILE_HANDLE, [string, any], null>(\n            WorkerRequestType.REGISTER_FILE_HANDLE,\n            [name, handle],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Enable file statistics */\n    public async collectFileStatistics(name: string, enable: boolean): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COLLECT_FILE_STATISTICS, [string, boolean], null>(\n            WorkerRequestType.COLLECT_FILE_STATISTICS,\n            [name, enable],\n        );\n        await this.postTask(task, []);\n    }\n\n    /** Export file statistics */\n    public async exportFileStatistics(name: string): Promise<FileStatistics> {\n        const task = new WorkerTask<WorkerRequestType.EXPORT_FILE_STATISTICS, string, FileStatistics>(\n            WorkerRequestType.EXPORT_FILE_STATISTICS,\n            name,\n        );\n        return await this.postTask(task, []);\n    }\n\n    /** Copy a file to a buffer. */\n    public async copyFileToBuffer(name: string): Promise<Uint8Array> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_BUFFER, string, Uint8Array>(\n            WorkerRequestType.COPY_FILE_TO_BUFFER,\n            name,\n        );\n        return await this.postTask(task);\n    }\n\n    /** Copy a file to a path. */\n    public async copyFileToPath(name: string, path: string): Promise<void> {\n        const task = new WorkerTask<WorkerRequestType.COPY_FILE_TO_PATH, [string, string], null>(\n            WorkerRequestType.COPY_FILE_TO_PATH,\n            [name, path],\n        );\n        await this.postTask(task);\n    }\n\n    /** Insert arrow from an ipc stream */\n    public async insertArrowFromIPCStream(\n        conn: ConnectionID,\n        buffer: Uint8Array,\n        options?: ArrowInsertOptions,\n    ): Promise<void> {\n        if (buffer.length == 0) return;\n        // Pass to the worker\n        const task = new WorkerTask<\n            WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM,\n            [number, Uint8Array, ArrowInsertOptions | undefined],\n            null\n        >(WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM, [conn, buffer, options]);\n        await this.postTask(task, [buffer.buffer]);\n    }\n    /** Insert a csv file */\n    public async insertCSVFromPath(conn: ConnectionID, path: string, options: CSVInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(arrowToSQLField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_CSV_FROM_PATH, [number, string, CSVInsertOptions], null>(\n            WorkerRequestType.INSERT_CSV_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n    /** Insert a json file */\n    public async insertJSONFromPath(conn: ConnectionID, path: string, options: JSONInsertOptions): Promise<void> {\n        // Flatten the table options\n        if (options.columns !== undefined) {\n            const out = [];\n            for (const k in options.columns) {\n                const type = options.columns[k];\n                out.push(arrowToSQLField(k, type));\n            }\n            options.columnsFlat = out;\n            delete options.columns;\n        }\n\n        // Pass to the worker\n        const task = new WorkerTask<WorkerRequestType.INSERT_JSON_FROM_PATH, [number, string, JSONInsertOptions], null>(\n            WorkerRequestType.INSERT_JSON_FROM_PATH,\n            [conn, path, options],\n        );\n        await this.postTask(task);\n    }\n}\n", "import { DuckDBBindings } from '../bindings';\nimport { WorkerResponseVariant, WorkerRequestVariant, WorkerRequestType, WorkerResponseType } from './worker_request';\nimport { Logger, LogEntryVariant } from '../log';\nimport { InstantiationProgress } from '../bindings/progress';\n\nexport abstract class AsyncDuckDBDispatcher implements Logger {\n    /** The bindings */\n    protected _bindings: DuckDBBindings | null = null;\n    /** The next message id */\n    protected _nextMessageId = 0;\n\n    /** Instantiate the wasm module */\n    protected abstract instantiate(\n        mainModule: string,\n        pthreadWorker: string | null,\n        progress: (p: InstantiationProgress) => void,\n    ): Promise<DuckDBBindings>;\n    /** Post a response to the main thread */\n    protected abstract postMessage(response: WorkerResponseVariant, transfer: ArrayBuffer[]): void;\n\n    /** Send log entry to the main thread */\n    public log(entry: LogEntryVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: 0,\n                type: WorkerResponseType.LOG,\n                data: entry,\n            },\n            [],\n        );\n    }\n\n    /** Send plain OK without further data */\n    protected sendOK(request: WorkerRequestVariant): void {\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.OK,\n                data: null,\n            },\n            [],\n        );\n    }\n\n    /** Fail with an error */\n    protected failWith(request: WorkerRequestVariant, e: Error): void {\n        // Workaround for Firefox not being able to perform structured-clone on Native Errors\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1556604\n        const obj: any = {\n            name: e.name,\n            message: e.message,\n            stack: e.stack || undefined,\n        };\n        this.postMessage(\n            {\n                messageId: this._nextMessageId++,\n                requestId: request.messageId,\n                type: WorkerResponseType.ERROR,\n                data: obj,\n            },\n            [],\n        );\n        return;\n    }\n\n    /** Process a request from the main thread */\n    public async onMessage(request: WorkerRequestVariant): Promise<void> {\n        // First process those requests that don't need bindings\n        switch (request.type) {\n            case WorkerRequestType.PING:\n                this.sendOK(request);\n                return;\n            case WorkerRequestType.INSTANTIATE:\n                if (this._bindings != null) {\n                    this.failWith(request, new Error('duckdb already initialized'));\n                }\n                try {\n                    this._bindings = await this.instantiate(request.data[0], request.data[1], p => {\n                        this.postMessage(\n                            {\n                                messageId: this._nextMessageId++,\n                                requestId: request.messageId,\n                                type: WorkerResponseType.INSTANTIATE_PROGRESS,\n                                data: p,\n                            },\n                            [],\n                        );\n                    });\n                    this.sendOK(request);\n                } catch (e: any) {\n                    this._bindings = null;\n                    this.failWith(request, e);\n                }\n                return;\n            default:\n                break;\n        }\n\n        // Bindings not initialized?\n        if (!this._bindings) {\n            return this.failWith(request, new Error('duckdb is not initialized'));\n        }\n\n        // Catch every exception and forward it as error message to the main thread\n        try {\n            switch (request.type) {\n                case WorkerRequestType.GET_VERSION:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.VERSION_STRING,\n                            data: this._bindings.getVersion(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.GET_FEATURE_FLAGS:\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FEATURE_FLAGS,\n                            data: this._bindings.getFeatureFlags(),\n                        },\n                        [],\n                    );\n                    break;\n                case WorkerRequestType.RESET:\n                    this._bindings.reset();\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.OPEN:\n                    this._bindings.open(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.DROP_FILE:\n                    this._bindings.dropFile(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.DROP_FILES:\n                    this._bindings.dropFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.FLUSH_FILES:\n                    this._bindings.flushFiles();\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CONNECT: {\n                    const conn = this._bindings.connect();\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.CONNECTION_INFO,\n                            data: conn.useUnsafe((_, c) => c),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.DISCONNECT:\n                    this._bindings.disconnect(request.data);\n                    this.sendOK(request);\n                    break;\n                case WorkerRequestType.CREATE_PREPARED: {\n                    const result = this._bindings.createPrepared(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.PREPARED_STATEMENT_ID,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.CLOSE_PREPARED: {\n                    this._bindings.closePrepared(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.RUN_PREPARED: {\n                    const result = this._bindings.runPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.RUN_QUERY: {\n                    const result = this._bindings.runQuery(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.SEND_PREPARED: {\n                    const result = this._bindings.sendPrepared(request.data[0], request.data[1], request.data[2]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_START,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.SEND_QUERY: {\n                    const result = this._bindings.sendQuery(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_START,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.FETCH_QUERY_RESULTS: {\n                    const result = this._bindings.fetchQueryResults(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.QUERY_RESULT_CHUNK,\n                            data: result,\n                        },\n                        [result.buffer],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GET_TABLE_NAMES: {\n                    const result = this._bindings.getTableNames(request.data[0], request.data[1]);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.TABLE_NAMES,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.GLOB_FILE_INFOS: {\n                    const infos = this._bindings.globFiles(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_INFOS,\n                            data: infos,\n                        },\n                        [],\n                    );\n                    break;\n                }\n\n                case WorkerRequestType.REGISTER_FILE_URL:\n                    this._bindings.registerFileURL(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_BUFFER:\n                    this._bindings.registerFileBuffer(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.REGISTER_FILE_HANDLE:\n                    this._bindings.registerFileHandle(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_PATH:\n                    this._bindings.copyFileToPath(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.COPY_FILE_TO_BUFFER: {\n                    const buffer = this._bindings.copyFileToBuffer(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_BUFFER,\n                            data: buffer,\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.COLLECT_FILE_STATISTICS:\n                    this._bindings.collectFileStatistics(request.data[0], request.data[1]);\n                    this.sendOK(request);\n                    break;\n\n                case WorkerRequestType.EXPORT_FILE_STATISTICS: {\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.FILE_STATISTICS,\n                            data: this._bindings.exportFileStatistics(request.data),\n                        },\n                        [],\n                    );\n                    break;\n                }\n                case WorkerRequestType.INSERT_ARROW_FROM_IPC_STREAM: {\n                    this._bindings.insertArrowFromIPCStream(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_CSV_FROM_PATH: {\n                    this._bindings.insertCSVFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.INSERT_JSON_FROM_PATH: {\n                    this._bindings.insertJSONFromPath(request.data[0], request.data[1], request.data[2]);\n                    this.sendOK(request);\n                    break;\n                }\n                case WorkerRequestType.TOKENIZE: {\n                    const result = this._bindings.tokenize(request.data);\n                    this.postMessage(\n                        {\n                            messageId: this._nextMessageId++,\n                            requestId: request.messageId,\n                            type: WorkerResponseType.SCRIPT_TOKENS,\n                            data: result,\n                        },\n                        [],\n                    );\n                    break;\n                }\n            }\n        } catch (e: any) {\n            return this.failWith(request, e);\n        }\n    }\n}\n", "export const bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),threads=()=>(async e=>{try{return\"undefined\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));\n", "import config from '../package.json';\n\nexport const PACKAGE_NAME = config.name;\nexport const PACKAGE_VERSION = config.version;\n\nconst VERSION_PARTS = config.version.split('.');\nexport const PACKAGE_VERSION_MAJOR = VERSION_PARTS[0];\nexport const PACKAGE_VERSION_MINOR = VERSION_PARTS[1];\nexport const PACKAGE_VERSION_PATCH = VERSION_PARTS[2];\n", "import * as check from 'wasm-feature-detect';\nimport { PACKAGE_NAME, PACKAGE_VERSION } from './version';\n\n// Platform check taken from here:\n// https://github.com/xtermjs/xterm.js/blob/master/src/common/Platform.ts#L21\n\ninterface INavigator {\n    userAgent: string;\n    language: string;\n    platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = () => (typeof navigator === 'undefined' ? true : false);\nconst userAgent = () => (isNode() ? 'node' : navigator.userAgent);\nexport const isFirefox = () => userAgent().includes('Firefox');\nexport const isSafari = () => /^((?!chrome|android).)*safari/i.test(userAgent());\n\nexport interface DuckDBBundles {\n    mvp: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    eh?: {\n        mainModule: string;\n        mainWorker: string;\n    };\n    coi?: {\n        mainModule: string;\n        mainWorker: string;\n        pthreadWorker: string;\n    };\n}\n\nexport function getJsDelivrBundles(): DuckDBBundles {\n    const jsdelivr_dist_url = `https://cdn.jsdelivr.net/npm/${PACKAGE_NAME}@${PACKAGE_VERSION}/dist/`;\n    return {\n        mvp: {\n            mainModule: `${jsdelivr_dist_url}duckdb-mvp.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-mvp.worker.js`,\n        },\n        eh: {\n            mainModule: `${jsdelivr_dist_url}duckdb-eh.wasm`,\n            mainWorker: `${jsdelivr_dist_url}duckdb-browser-eh.worker.js`,\n        },\n        // COI is still experimental, let the user opt in explicitly\n    };\n}\n\nexport interface DuckDBBundle {\n    mainModule: string;\n    mainWorker: string | null;\n    pthreadWorker: string | null;\n}\n\nexport interface PlatformFeatures {\n    bigInt64Array: boolean;\n    crossOriginIsolated: boolean;\n    wasmExceptions: boolean;\n    wasmSIMD: boolean;\n    wasmBulkMemory: boolean;\n    wasmThreads: boolean;\n}\n\nlet bigInt64Array: boolean | null = null;\nlet wasmExceptions: boolean | null = null;\nlet wasmThreads: boolean | null = null;\nlet wasmSIMD: boolean | null = null;\nlet wasmBulkMemory: boolean | null = null;\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n    let crossOriginIsolated: boolean;\n}\n\nexport async function getPlatformFeatures(): Promise<PlatformFeatures> {\n    if (bigInt64Array == null) {\n        bigInt64Array = typeof BigInt64Array != 'undefined';\n    }\n    if (wasmExceptions == null) {\n        wasmExceptions = await check.exceptions();\n    }\n    if (wasmThreads == null) {\n        wasmThreads = await check.threads();\n    }\n    if (wasmSIMD == null) {\n        wasmSIMD = await check.simd();\n    }\n    if (wasmBulkMemory == null) {\n        wasmBulkMemory = await check.bulkMemory();\n    }\n    return {\n        bigInt64Array: bigInt64Array!,\n        crossOriginIsolated: isNode() || globalThis.crossOriginIsolated || false,\n        wasmExceptions: wasmExceptions!,\n        wasmSIMD: wasmSIMD!,\n        wasmThreads: wasmThreads!,\n        wasmBulkMemory: wasmBulkMemory!,\n    };\n}\n\nexport async function selectBundle(bundles: DuckDBBundles): Promise<DuckDBBundle> {\n    const platform = await getPlatformFeatures();\n    // TODO(ankoh):\n    // Safari WASM exceptions are a bit buggy at the moment.\n    // Pivot demo crashes only in safari with eh: Unexpected \"RangeError: Maximum call stack size exceeded.\"\n    if (platform.wasmExceptions && !isSafari()) {\n        if (platform.wasmSIMD && platform.wasmThreads && platform.crossOriginIsolated && bundles.coi) {\n            return {\n                mainModule: bundles.coi.mainModule,\n                mainWorker: bundles.coi.mainWorker,\n                pthreadWorker: bundles.coi.pthreadWorker,\n            };\n        }\n        if (bundles.eh) {\n            return {\n                mainModule: bundles.eh.mainModule,\n                mainWorker: bundles.eh.mainWorker,\n                pthreadWorker: null,\n            };\n        }\n    }\n    return {\n        mainModule: bundles.mvp.mainModule,\n        mainWorker: bundles.mvp.mainWorker,\n        pthreadWorker: null,\n    };\n}\n", "import Worker from 'web-worker';\n\nexport async function createWorker(url: string) {\n    const request = new Request(url);\n    const workerScript = await fetch(request);\n    const workerURL = URL.createObjectURL(await workerScript.blob());\n    return new Worker(workerURL);\n}\n"],
  "mappings": "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",
  "names": []
}
